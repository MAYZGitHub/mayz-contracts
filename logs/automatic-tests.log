Build profile: -w ghc-8.10.7 -O1
In order, the following will be built (use -v for more details):
 - mayz-protocol-contracts-1.0.5 (lib) (configuration changed)
 - mayz-protocol-contracts-1.0.5 (test:AutomaticTests) (configuration changed)
Configuring library for mayz-protocol-contracts-1.0.5..
Preprocessing library for mayz-protocol-contracts-1.0.5..
Building library for mayz-protocol-contracts-1.0.5..
Configuring test suite 'AutomaticTests' for mayz-protocol-contracts-1.0.5..
Preprocessing test suite 'AutomaticTests' for mayz-protocol-contracts-1.0.5..
Building test suite 'AutomaticTests' for mayz-protocol-contracts-1.0.5..
Running 1 test suites...
Test suite AutomaticTests: RUNNING...
---------------
Reading Deploy File: export/test/deploy.json
Generating Test Params...
Generating Scripts...
Reading Excel: tests/config/tests.xlsx
---------------
Automatic Tests
  Contracts Tests
    Protocol Tests
      Protocol Policy Tests
        TX NAME: Protocol_Create_Tx - REDEEMER: Protocol_MintID - Tests
          Outputs Tests
            Protocol Outputs Tests
              Having valid for Protocol output must succeed:                                                                                                                                                                       OK (0.05s)
              None valid for Protocol output must fail (Just Protocol_MintID: ["Expected at least one output to script addresses"]):                                                                                               OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Protocol output must fail (Just Protocol_MintID: ["Expected Protocol at output to script index 0"]):                                                                 OK
              Having invalid ID value with InvalidTokenTN for Protocol output must fail (Just Protocol_MintID: ["Expected Protocol at output to script index 0"]):                                                                 OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol output must fail (Just Protocol_MintID: ["Expected Protocol at output to script index 0"]):                                                      OK
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol output must fail (Just Protocol_MintID: ["Expected Protocol at output to script index 0"]):                                                      OK
              Having invalid ID value with InvalidTokenAmount (More) for Protocol output must fail (Just Protocol_MintID: ["not isCorrect_Output_Protocol_Value"]):                                                                OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for Protocol output must fail (Just Protocol_MintID: ["not isCorrect_Output_Protocol_Value"]):                                                               OK
              Having invalid ADA value with InvalidTokenAmount (Less) for Protocol output must fail (Just Protocol_MintID: ["not isCorrect_Output_Protocol_Value"]):                                                               OK
              Having invalid ADA value with InvalidTokenAmount (More) for Protocol output must fail (Just Protocol_MintID: ["not isCorrect_Output_Protocol_Value"]):                                                               OK
              Using an invalid datum with InvalidEntityDatumData for Protocol output must fail (Just Protocol_MintID: ["not isCorrect_Output_Protocol_Value"]):                                                                    OK
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid datum with InvalidEntityDatumType for Protocol output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.04s)
          Minting Tests
            ProtocolID Minting Tests
              Having valid for ProtocolID minting must succeed:                                                                                                                                                                    OK
              Using invalid Token Name for ProtocolID minting must fail (Just Protocol_MintID: ["not isMintingID"]):                                                                                                               OK
              Using more token amount for ProtocolID minting must fail (Just Protocol_MintID: ["not isMintingID"]):                                                                                                                OK
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
      Protocol Validator Tests
        TX NAME: Protocol_DatumUpdate_Tx - REDEEMER: Protocol_DatumUpdate - Tests
          Inputs Consume Tests
            Protocol Input Tests
              Having valid for Protocol input must succeed:                                                                                                                                                                        OK
              Having more than one for Protocol input must fail (Just Protocol_DatumUpdate: ["Expected exactly one Protocol input"]):                                                                                              OK
              Having invalid ID value with InvalidTokenCS for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                            OK
              Having invalid ID value with InvalidTokenTN for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                            OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                 OK
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                 OK
              Having invalid ID value with InvalidTokenAmount (More) for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                 OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                OK
              Having invalid ADA value with InvalidTokenAmount (Less) for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                OK
              Having invalid ADA value with InvalidTokenAmount (More) for Protocol input must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                OK
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input must fail (Just Protocol_DatumUpdate: ["ERROR EVALUATING SCRIPT"]):                                                                        OK
              Using an invalid redeemer with InvalidRedeemerNonExist for Protocol input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
          Outputs Tests
            Protocol Outputs Tests
              Having valid for Protocol output must succeed:                                                                                                                                                                       OK
              None valid for Protocol output must fail (Just Protocol_DatumUpdate: ["Expected at least one output to script addresses"]):                                                                                          OK
              Having invalid ID value with InvalidTokenCS for Protocol output must fail (Just Protocol_DatumUpdate: ["Expected Protocol at output to script index 0"]):                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Protocol output must fail (Just Protocol_DatumUpdate: ["Expected Protocol at output to script index 0"]):                                                            OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol output must fail (Just Protocol_DatumUpdate: ["Expected Protocol at output to script index 0"]):                                                 OK
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol output must fail (Just Protocol_DatumUpdate: ["Expected Protocol at output to script index 0"]):                                                 OK
              Having invalid ID value with InvalidTokenAmount (More) for Protocol output must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                                OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for Protocol output must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                               OK
              Having invalid ADA value with InvalidTokenAmount (Less) for Protocol output must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                               OK
              Having invalid ADA value with InvalidTokenAmount (More) for Protocol output must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Value_NotChanged"]):                                               OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Protocol output must fail (Just Protocol_DatumUpdate: ["not isCorrect_Output_Protocol_Datum_Updated"]):                                                       OK
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid datum with InvalidEntityDatumType for Protocol output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK
              Having invalid address for Protocol output must fail (Just Protocol_DatumUpdate: ["Expected Protocol at output to script index 0"]):                                                                                 OK
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
            Using invalid range must fail (Just Protocol_DatumUpdate: ["not isValidRange"]):                                                                                                                                       OK
            Using no specific range must fail (Just Protocol_DatumUpdate: ["not isValidRange"]):                                                                                                                                   OK
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK
            Using no signatures must fail (Just Protocol_DatumUpdate: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                       OK
            Using other invalid signatures must fail (Just Protocol_DatumUpdate: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                            OK
        TX NAME: Protocol_UpdateMinADA_Tx - REDEEMER: Protocol_UpdateMinADA - Tests
          Inputs Consume Tests
            Protocol Input Tests
              Having valid for Protocol input must succeed:                                                                                                                                                                        OK
              Having more than one for Protocol input must fail (Just Protocol_UpdateMinADA: ["Expected exactly one Protocol input"]):                                                                                             OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                                   OK
              Having invalid ID value with InvalidTokenTN for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                                   OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                        OK
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                        OK
              Having invalid ID value with InvalidTokenAmount (More) for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                        OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                       OK
              Having invalid ADA value with InvalidTokenAmount (Less) for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                       OK
              Having invalid ADA value with InvalidTokenAmount (More) for Protocol input must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                       OK
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input must fail (Just Protocol_UpdateMinADA: ["ERROR EVALUATING SCRIPT"]):                                                                       OK
              Using an invalid redeemer with InvalidRedeemerNonExist for Protocol input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid redeemer with InvalidRedeemerType for Protocol input must fail (Nothing: [""]):                                                                                                                     OK
          Outputs Tests
            Protocol Outputs Tests
              Having valid for Protocol output must succeed:                                                                                                                                                                       OK
              None valid for Protocol output must fail (Just Protocol_UpdateMinADA: ["Expected at least one output to script addresses"]):                                                                                         OK
              Having invalid ID value with InvalidTokenCS for Protocol output must fail (Just Protocol_UpdateMinADA: ["Expected Protocol at output to script index 0"]):                                                           OK
              Having invalid ID value with InvalidTokenTN for Protocol output must fail (Just Protocol_UpdateMinADA: ["Expected Protocol at output to script index 0"]):                                                           OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol output must fail (Just Protocol_UpdateMinADA: ["Expected Protocol at output to script index 0"]):                                                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol output must fail (Just Protocol_UpdateMinADA: ["Expected Protocol at output to script index 0"]):                                                OK
              Having invalid ID value with InvalidTokenAmount (More) for Protocol output must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                       OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for Protocol output must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                      OK
              Having invalid ADA value with InvalidTokenAmount (Less) for Protocol output must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                      OK
              Having invalid ADA value with InvalidTokenAmount (More) for Protocol output must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                      OK
              Using an invalid datum with InvalidEntityDatumData for Protocol output must fail (Just Protocol_UpdateMinADA: ["not isCorrect_Output_Protocol_Value_With_MinADAChanged"]):                                           OK
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid datum with InvalidEntityDatumType for Protocol output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK
              Having invalid address for Protocol output must fail (Just Protocol_UpdateMinADA: ["Expected Protocol at output to script index 0"]):                                                                                OK
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
            Using invalid range must fail (Just Protocol_UpdateMinADA: ["not isValidRange"]):                                                                                                                                      OK
            Using no specific range must fail (Just Protocol_UpdateMinADA: ["not isValidRange"]):                                                                                                                                  OK
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK
            Using no signatures must fail (Just Protocol_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                      OK
            Using other invalid signatures must fail (Just Protocol_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                           OK
          Property Based Tests
            Having Valid Min ADA positive must succeed:                                                                                                                                                                            OK (0.85s)
              +++ OK, passed 100 tests.
            Having Invalid Min ADA negative must fail (Just Protocol_UpdateMinADA: ["not min ADA > 0"]):                                                                                                                           OK (0.86s)
              +++ OK, passed 100 tests.
        TX NAME: Protocol_Emergency_Tx - REDEEMER: Protocol_Emergency - Tests
          Valid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                        OK
          Valid datum, admin redeemer, no signature, admin token - must succeed:                                                                                                                                                   OK
          Valid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                  OK
          Valid datum, admin redeemer, no signature, both tokens - must succeed:                                                                                                                                                   OK
          Valid datum, admin redeemer, signature, no tokens - must succeed:                                                                                                                                                        OK
          Valid datum, admin redeemer, signature, admin token - must succeed:                                                                                                                                                      OK
          Valid datum, admin redeemer, signature, emergency token - must succeed:                                                                                                                                                  OK
          Valid datum, admin redeemer, signature, both tokens - must succeed:                                                                                                                                                      OK
          Valid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                    OK
          Valid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                  OK
          Valid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                           OK
          Valid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                               OK (0.01s)
          Valid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                       OK (0.02s)
          Valid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                     OK
          Valid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                              OK
          Valid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                  OK
          Invalid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                      OK
          Invalid datum, admin redeemer, no signature, admin token - must fail:                                                                                                                                                    OK
          Invalid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                OK
          Invalid datum, admin redeemer, no signature, both tokens - must fail:                                                                                                                                                    OK
          Invalid datum, admin redeemer, signature, no tokens - must fail:                                                                                                                                                         OK
          Invalid datum, admin redeemer, signature, admin token - must fail:                                                                                                                                                       OK
          Invalid datum, admin redeemer, signature, emergency token - must fail:                                                                                                                                                   OK
          Invalid datum, admin redeemer, signature, both tokens - must fail:                                                                                                                                                       OK
          Invalid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                  OK
          Invalid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                OK
          Invalid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                         OK
          Invalid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                             OK
          Invalid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                     OK
          Invalid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                   OK
          Invalid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                            OK
          Invalid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                OK
    Fund Tests
      Fund Policy Tests
        TX NAME: Fund_Create_Tx - REDEEMER: Fund_MintID - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.07s)
              None valid for Protocol input ref must fail (Just Fund_MintID: ["Expected exactly one Protocol input ref"]):                                                                                                         OK
              Having more than one for Protocol input ref must fail (Just Fund_MintID: ["Expected exactly one Protocol input ref"]):                                                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just Fund_MintID: ["Expected exactly one Protocol input ref"]):                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just Fund_MintID: ["Expected exactly one Protocol input ref"]):                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just Fund_MintID: ["Expected exactly one Protocol input ref"]):                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just Fund_MintID: ["Expected exactly one Protocol input ref"]):                                                             OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.03s)
              None valid for Fund output must fail (Just Fund_MintID: ["Expected at least two outputs to script addresses"]):                                                                                                      OK (0.02s)
              Having more than one for Fund output must fail (Just Fund_MintID: ["Expected InvestUnit at output index 1"]):                                                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_MintID: ["Expected Fund at output index 0"]):                                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_MintID: ["Expected Fund at output index 0"]):                                                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_MintID: ["Expected Fund at output index 0"]):                                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_MintID: ["Expected Fund at output index 0"]):                                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_MintID: ["not isCorrect_Output_Fund_Value"]):                                                                            OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_MintID: ["not isCorrect_Output_Fund_Value"]):                                                                           OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_MintID: ["not isCorrect_Output_Fund_Value"]):                                                                           OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_MintID: ["not isCorrect_Output_Fund_Value"]):                                                                           OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                                     OK (0.03s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                                     OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                          OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                          OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_MintID: ["not isCorrect_Output_Fund_Value"]):                                                                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.03s)
              Having invalid address for Fund output must fail (Just Fund_MintID: ["Expected Fund at output index 0"]):                                                                                                            OK (0.01s)
            InvestUnit Outputs Tests
              Having valid for InvestUnit output must succeed:                                                                                                                                                                     OK (0.03s)
              None valid for InvestUnit output must fail (Just Fund_MintID: ["Expected at least two outputs to script addresses"]):                                                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenCS for InvestUnit output must fail (Just Fund_MintID: ["Expected InvestUnit at output index 1"]):                                                                           OK (0.02s)
              Having invalid ID value with InvalidTokenTN for InvestUnit output must fail (Just Fund_MintID: ["Expected InvestUnit at output index 1"]):                                                                           OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Just Fund_MintID: ["Expected InvestUnit at output index 1"]):                                                                OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit output must fail (Just Fund_MintID: ["Expected InvestUnit at output index 1"]):                                                                OK
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit output must fail (Just Fund_MintID: ["not isCorrect_Output_InvestUnit_Value"]):                                                                OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Just Fund_MintID: ["not isCorrect_Output_InvestUnit_Value"]):                                                               OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit output must fail (Just Fund_MintID: ["not isCorrect_Output_InvestUnit_Value"]):                                                               OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit output must fail (Just Fund_MintID: ["not isCorrect_Output_InvestUnit_Value"]):                                                               OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit output must fail (Just Fund_MintID: ["not isCorrect_Output_InvestUnit_Value"]):                                                                    OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.01s)
              Having invalid address for InvestUnit output must fail (Just Fund_MintID: ["Expected InvestUnit at output index 1"]):                                                                                                OK (0.02s)
          Minting Tests
            FundID Minting Tests
              Having valid for FundID minting must succeed:                                                                                                                                                                        OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for FundID minting must fail (Nothing: [""]):                                                                                                                     OK (0.01s)
              Using invalid Token Name for FundID minting must fail (Just Fund_MintID: ["not isMintingIDs"]):                                                                                                                      OK (0.03s)
              Using more token amount for FundID minting must fail (Just Fund_MintID: ["not isMintingIDs"]):                                                                                                                       OK (0.02s)
            InvestUnitID Minting Tests
              Having valid for InvestUnitID minting must succeed:                                                                                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnitID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnitID minting must fail (Nothing: [""]):                                                                                                               OK (0.02s)
              Using invalid Token Name for InvestUnitID minting must fail (Just Fund_MintID: ["not isMintingIDs"]):                                                                                                                OK (0.02s)
              Using more token amount for InvestUnitID minting must fail (Just Fund_MintID: ["not isMintingIDs"]):                                                                                                                 OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.03s)
        TX NAME: Fund_Delete_Tx - REDEEMER: Fund_BurnID - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.03s)
            InvestUnit Input Tests
              Having valid for InvestUnit input must succeed:                                                                                                                                                                      OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnit input must fail (Nothing: [""]):                                                                                                                   OK (0.05s)
          Minting Tests
            FundID Minting Tests
              Having valid for FundID minting must succeed:                                                                                                                                                                        OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for FundID minting must fail (Nothing: [""]):                                                                                                                     OK (0.04s)
              Using invalid Token Name for FundID minting must fail (Just Fund_BurnID: ["not isBurningIDs"]):                                                                                                                      OK (0.02s)
              Using more token amount for FundID minting must fail (Just Fund_BurnID: ["not isBurningIDs"]):                                                                                                                       OK (0.02s)
            InvestUnitID Minting Tests
              Having valid for InvestUnitID minting must succeed:                                                                                                                                                                  OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnitID minting must fail (Nothing: [""]):                                                                                                               OK (0.06s)
              Using invalid Token Name for InvestUnitID minting must fail (Just Fund_BurnID: ["not isBurningIDs"]):                                                                                                                OK (0.02s)
              Using more token amount for InvestUnitID minting must fail (Just Fund_BurnID: ["not isBurningIDs"]):                                                                                                                 OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.06s)
            Using invalid range must fail (Nothing: ["not isValidRange"]):                                                                                                                                                         OK (0.03s)
            Using no specific range must fail (Nothing: ["not isValidRange"]):                                                                                                                                                     OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Nothing: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                                         OK (0.04s)
            Using other invalid signatures must fail (Nothing: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                              OK (0.03s)
        TX NAME: Fund_Deposit_Tx - REDEEMER: Fund_MintFT - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just Fund_MintFT: ["Expected exactly one Fund input ref"]):                                                                                                                 OK (0.02s)
              Having more than one for Fund input ref must fail (Just Fund_MintFT: ["Expected exactly one Fund input ref"]):                                                                                                       OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just Fund_MintFT: ["Expected exactly one Fund input ref"]):                                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just Fund_MintFT: ["Expected exactly one Fund input ref"]):                                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just Fund_MintFT: ["Expected exactly one Fund input ref"]):                                                                     OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just Fund_MintFT: ["Expected exactly one Fund input ref"]):                                                                     OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
            InvestUnit Input Ref Tests
              Having valid for InvestUnit input ref must succeed:                                                                                                                                                                  OK (0.02s)
              None valid for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                                                              OK (0.02s)
              Having more than one for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                             OK
              Having invalid ID value with InvalidTokenTN for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                             OK
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                  OK
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                  OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.01s)
              None valid for FundHolding input must fail (Just Fund_MintFT: ["Expected exactly one FundHolding input"]):                                                                                                           OK (0.02s)
              Having more than one for FundHolding input must fail (Just Fund_MintFT: ["Expected exactly one FundHolding input"]):                                                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just Fund_MintFT: ["Expected exactly one FundHolding input"]):                                                                          OK (0.04s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just Fund_MintFT: ["Expected exactly one FundHolding input"]):                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just Fund_MintFT: ["Expected exactly one FundHolding input"]):                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                     OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                    OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                    OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                    OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_With_Deposit"]):                                                               OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just Fund_MintFT: ["not isMintingFT"]):                                                                                          OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.02s)
              None valid for FundHolding output must fail (Nothing: ["Expected at least one output to script addresses"]):                                                                                                         OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                    OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                   OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                   OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                                   OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_With_Deposit"]):                                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                                       OK (0.02s)
          Minting Tests
            FundFT Minting Tests
              Having valid for FundFT minting must succeed:                                                                                                                                                                        OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundFT minting must fail (Just Fund_MintFT: ["ERROR EVALUATING SCRIPT"]):                                                                                 OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for FundFT minting must fail (Nothing: [""]):                                                                                                                     OK (0.04s)
              Using invalid Token Name for FundFT minting must fail (Just Fund_MintFT: ["not isMintingFT"]):                                                                                                                       OK (0.02s)
              Using less token amount for FundFT minting must fail (Just Fund_MintFT: ["not isMintingFT"]):                                                                                                                        OK (0.01s)
              Using more token amount for FundFT minting must fail (Just Fund_MintFT: ["not isMintingFT"]):                                                                                                                        OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.04s)
            Using invalid range must fail (Nothing: ["not isValidRange"]):                                                                                                                                                         OK (0.02s)
            Using no specific range must fail (Just Fund_MintFT: ["not isFundOpen"]):                                                                                                                                              OK (0.02s)
        TX NAME: Fund_Withdraw_Tx - REDEEMER: Fund_BurnFT - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just Fund_BurnFT: ["Expected exactly one Fund input ref"]):                                                                                                                 OK (0.02s)
              Having more than one for Fund input ref must fail (Just Fund_BurnFT: ["Expected exactly one Fund input ref"]):                                                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just Fund_BurnFT: ["Expected exactly one Fund input ref"]):                                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just Fund_BurnFT: ["Expected exactly one Fund input ref"]):                                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just Fund_BurnFT: ["Expected exactly one Fund input ref"]):                                                                     OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just Fund_BurnFT: ["Expected exactly one Fund input ref"]):                                                                     OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK
            InvestUnit Input Ref Tests
              Having valid for InvestUnit input ref must succeed:                                                                                                                                                                  OK (0.03s)
              None valid for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                                                              OK (0.01s)
              Having more than one for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenTN for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input ref must fail (Nothing: ["Expected exactly one InvestUnit input ref"]):                                                                  OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.02s)
              None valid for FundHolding input must fail (Just Fund_BurnFT: ["Expected exactly one FundHolding input"]):                                                                                                           OK (0.01s)
              Having more than one for FundHolding input must fail (Just Fund_BurnFT: ["Expected exactly one FundHolding input"]):                                                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just Fund_BurnFT: ["Expected exactly one FundHolding input"]):                                                                          OK (0.05s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                             OK
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just Fund_BurnFT: ["Expected exactly one FundHolding input"]):                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just Fund_BurnFT: ["Expected exactly one FundHolding input"]):                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                 OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                 OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                 OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_With_Withdraw"]):                                                              OK
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just Fund_BurnFT: ["not isBurningFT"]):                                                                                          OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.02s)
              None valid for FundHolding output must fail (Nothing: ["Expected at least one output to script addresses"]):                                                                                                         OK (0.01s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                 OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_With_Withdraw"]):                                                             OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                                       OK (0.02s)
          Minting Tests
            FundFT Minting Tests
              Having valid for FundFT minting must succeed:                                                                                                                                                                        OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundFT minting must fail (Just Fund_BurnFT: ["ERROR EVALUATING SCRIPT"]):                                                                                 OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for FundFT minting must fail (Nothing: [""]):                                                                                                                     OK (0.03s)
              Using invalid Token Name for FundFT minting must fail (Just Fund_BurnFT: ["not isBurningFT"]):                                                                                                                       OK (0.01s)
              Using less token amount for FundFT minting must fail (Just Fund_BurnFT: ["not isBurningFT"]):                                                                                                                        OK (0.02s)
              Using more token amount for FundFT minting must fail (Just Fund_BurnFT: ["not isBurningFT"]):                                                                                                                        OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.04s)
            Using invalid range must fail (Nothing: ["not isValidRange"]):                                                                                                                                                         OK (0.01s)
            Using no specific range must succeed:                                                                                                                                                                                  OK (0.01s)
      Fund Validator Tests
        TX NAME: Fund_DatumUpdate_Tx - REDEEMER: Fund_DatumUpdate - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.02s)
              Having more than one for Fund input must fail (Just Fund_DatumUpdate: ["Expected exactly one Fund input"]):                                                                                                          OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                             OK
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                             OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                            OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                            OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                            OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                      OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                      OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                           OK
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                           OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                           OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Datum_Updated"]):                                                                    OK
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.01s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.02s)
              None valid for Fund output must fail (Just Fund_DatumUpdate: ["Expected at least one output to script addresses"]):                                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_DatumUpdate: ["Expected Fund at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_DatumUpdate: ["Expected Fund at output index 0"]):                                                                                  OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_DatumUpdate: ["Expected Fund at output index 0"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_DatumUpdate: ["Expected Fund at output index 0"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                            OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                           OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                           OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                           OK (0.03s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                     OK (0.03s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                     OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_DatumUpdate: ["not isCorrect_Output_Fund_Datum_Updated"]):                                                                   OK
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.01s)
              Having invalid address for Fund output must fail (Just Fund_DatumUpdate: ["Expected Fund at output index 0"]):                                                                                                       OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.03s)
            Using invalid range must fail (Just Fund_DatumUpdate: ["not isValidRange"]):                                                                                                                                           OK (0.02s)
            Using no specific range must fail (Just Fund_DatumUpdate: ["not isValidRange"]):                                                                                                                                       OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.02s)
            Using no signatures must fail (Just Fund_DatumUpdate: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                           OK (0.02s)
            Using other invalid signatures must fail (Just Fund_DatumUpdate: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                OK (0.02s)
        TX NAME: Fund_UpdateMinADA_Tx - REDEEMER: Fund_UpdateMinADA - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.02s)
              Having more than one for Fund input must fail (Just Fund_UpdateMinADA: ["Expected exactly one Fund input"]):                                                                                                         OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                    OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                    OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                    OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                   OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                   OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                   OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                             OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                             OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                  OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                  OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                  OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                        OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.03s)
              None valid for Fund output must fail (Just Fund_UpdateMinADA: ["Expected at least one output to script addresses"]):                                                                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_UpdateMinADA: ["Expected Fund at output index 0"]):                                                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_UpdateMinADA: ["Expected Fund at output index 0"]):                                                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_UpdateMinADA: ["Expected Fund at output index 0"]):                                                                      OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_UpdateMinADA: ["Expected Fund at output index 0"]):                                                                      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                   OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                  OK
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                            OK (0.03s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                            OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                 OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                 OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                 OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_UpdateMinADA: ["not isCorrect_Output_Fund_Value_With_MinADAChanged"]):                                                       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.02s)
              Having invalid address for Fund output must fail (Just Fund_UpdateMinADA: ["Expected Fund at output index 0"]):                                                                                                      OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just Fund_UpdateMinADA: ["not isValidRange"]):                                                                                                                                          OK (0.03s)
            Using no specific range must fail (Just Fund_UpdateMinADA: ["not isValidRange"]):                                                                                                                                      OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.02s)
            Using no signatures must fail (Just Fund_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                          OK (0.02s)
            Using other invalid signatures must fail (Just Fund_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                               OK (0.01s)
          Property Based Tests
            Having Valid Min ADA positive must succeed:                                                                                                                                                                            OK (2.24s)
              +++ OK, passed 100 tests.
            Having Invalid Min ADA negative must fail (Just Fund_UpdateMinADA: ["not min ADA > 0"]):                                                                                                                               OK (2.36s)
              +++ OK, passed 100 tests.
        TX NAME: FundHolding_Create_Tx - REDEEMER: Fund_FundHoldingAdd - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.02s)
              Having more than one for Fund input must fail (Just Fund_FundHoldingAdd: ["Expected exactly one Fund input"]):                                                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                     OK (0.04s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.04s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                   OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                   OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Datum_With_HoldingAdded"]):                                                       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.02s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.02s)
              None valid for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                                                                OK (0.03s)
              Having more than one for Fund output must fail (Nothing: ["Expected FundHolding at output index 1"]):                                                                                                                OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                    OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.04s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Datum_With_HoldingAdded"]):                                                      OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK
              Having invalid address for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                                                    OK (0.02s)
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.04s)
              None valid for FundHolding output must fail (Nothing: ["Expected at least two outputs to script addresses"]):                                                                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 1"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 1"]):                                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 1"]):                                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 1"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value"]):                                                                       OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value"]):                                                                      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value"]):                                                                      OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value"]):                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value"]):                                                                           OK
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
              Having invalid address for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 1"]):                                                                                                       OK (0.04s)
          Minting Tests
            FundHoldingID Minting Tests
              Having valid for FundHoldingID minting must succeed:                                                                                                                                                                 OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHoldingID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                   OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for FundHoldingID minting must fail (Nothing: [""]):                                                                                                              OK (0.03s)
              Using invalid Token Name for FundHoldingID minting must fail (Nothing: ["not isMintingFundHoldingID"]):                                                                                                              OK (0.04s)
              Using more token amount for FundHoldingID minting must fail (Just Fund_FundHoldingAdd: ["not isMintingFundHoldingID"]):                                                                                              OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
            Using invalid range must fail (Just Fund_FundHoldingAdd: ["not isValidRange"]):                                                                                                                                        OK (0.01s)
            Using no specific range must fail (Just Fund_FundHoldingAdd: ["not isValidRange"]):                                                                                                                                    OK (0.04s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.03s)
            Using no signatures must fail (Just Fund_FundHoldingAdd: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                        OK (0.02s)
            Using other invalid signatures must fail (Just Fund_FundHoldingAdd: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                             OK (0.03s)
        TX NAME: FundHolding_Delete_Tx - REDEEMER: Fund_FundHoldingDelete - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.06s)
              Having more than one for Fund input must fail (Just Fund_FundHoldingDelete: ["Expected exactly one Fund input"]):                                                                                                    OK (0.05s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.05s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.03s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Datum_With_HoldingDeleted"]):                                                  OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.05s)
              None valid for FundHolding input must fail (Nothing: ["Expected exactly one FundHolding input"]):                                                                                                                    OK (0.02s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Nothing: ["Expected exactly one FundHolding input"]):                                                                                   OK (0.04s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Nothing: ["not isZeroAssets"]):                                                                                                         OK (0.06s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Nothing: ["Expected exactly one FundHolding input"]):                                                                        OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Nothing: ["Expected exactly one FundHolding input"]):                                                                        OK (0.06s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isZeroAssets"]):                                                                                              OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Nothing: ["not isZeroAssets"]):                                                                                             OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Nothing: ["not isZeroAssets"]):                                                                                             OK (0.06s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isZeroAssets"]):                                                                                             OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.06s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.03s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.05s)
              None valid for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected at least one output to script addresses"]):                                                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                            OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                 OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.06s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.05s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Datum_With_HoldingDeleted"]):                                                 OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.03s)
              Having invalid address for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                                                 OK (0.06s)
          Minting Tests
            FundHoldingID Minting Tests
              Having valid for FundHoldingID minting must succeed:                                                                                                                                                                 OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHoldingID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                   OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerType for FundHoldingID minting must fail (Nothing: [""]):                                                                                                              OK (0.04s)
              Using invalid Token Name for FundHoldingID minting must fail (Nothing: ["not isBurningFundHoldingID"]):                                                                                                              OK (0.05s)
              Using more token amount for FundHoldingID minting must fail (Just Fund_FundHoldingDelete: ["not isBurningFundHoldingID"]):                                                                                           OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.04s)
            Using invalid range must fail (Just Fund_FundHoldingDelete: ["not isValidRange"]):                                                                                                                                     OK (0.04s)
            Using no specific range must fail (Just Fund_FundHoldingDelete: ["not isValidRange"]):                                                                                                                                 OK (0.04s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.05s)
            Using no signatures must fail (Just Fund_FundHoldingDelete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                     OK (0.02s)
            Using other invalid signatures must fail (Just Fund_FundHoldingDelete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                          OK (0.03s)
        TX NAME: Fund_Finish_Tx - REDEEMER: Fund_Finish - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.02s)
              Having more than one for Fund input must fail (Just Fund_Finish: ["Expected exactly one Fund input"]):                                                                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                 OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                 OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                 OK (0.03s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                           OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                           OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Datum_With_ClosedAt"]):                                                                   OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.03s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.02s)
              None valid for Fund output must fail (Just Fund_Finish: ["Expected at least one output to script addresses"]):                                                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_Finish: ["Expected Fund at output index 0"]):                                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_Finish: ["Expected Fund at output index 0"]):                                                                                       OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_Finish: ["Expected Fund at output index 0"]):                                                                            OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_Finish: ["Expected Fund at output index 0"]):                                                                            OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                 OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                          OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                          OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_Finish: ["not isCorrect_Output_Fund_Datum_With_ClosedAt"]):                                                                  OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.01s)
              Having invalid address for Fund output must fail (Just Fund_Finish: ["Expected Fund at output index 0"]):                                                                                                            OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just Fund_Finish: ["not isValidRange"]):                                                                                                                                                OK (0.02s)
            Using no specific range must fail (Just Fund_Finish: ["not isValidRange"]):                                                                                                                                            OK
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.01s)
            Using no signatures must fail (Just Fund_Finish: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                                OK (0.02s)
            Using other invalid signatures must fail (Just Fund_Finish: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                     OK (0.02s)
        TX NAME: Fund_Emergency_Tx - REDEEMER: Fund_Emergency - Tests
          Valid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                        OK (0.01s)
          Valid datum, admin redeemer, no signature, admin token - must succeed:                                                                                                                                                   OK (0.02s)
          Valid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                  OK (0.01s)
          Valid datum, admin redeemer, no signature, both tokens - must succeed:                                                                                                                                                   OK (0.03s)
          Valid datum, admin redeemer, signature, no tokens - must succeed:                                                                                                                                                        OK (0.02s)
          Valid datum, admin redeemer, signature, admin token - must succeed:                                                                                                                                                      OK (0.02s)
          Valid datum, admin redeemer, signature, emergency token - must succeed:                                                                                                                                                  OK (0.02s)
          Valid datum, admin redeemer, signature, both tokens - must succeed:                                                                                                                                                      OK (0.01s)
          Valid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                    OK (0.01s)
          Valid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                  OK
          Valid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                           OK (0.03s)
          Valid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                               OK (0.01s)
          Valid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                       OK (0.01s)
          Valid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                     OK (0.01s)
          Valid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                              OK
          Valid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                  OK (0.01s)
          Invalid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                      OK (0.01s)
          Invalid datum, admin redeemer, no signature, admin token - must fail:                                                                                                                                                    OK (0.03s)
          Invalid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                OK (0.02s)
          Invalid datum, admin redeemer, no signature, both tokens - must fail:                                                                                                                                                    OK (0.01s)
          Invalid datum, admin redeemer, signature, no tokens - must fail:                                                                                                                                                         OK
          Invalid datum, admin redeemer, signature, admin token - must fail:                                                                                                                                                       OK (0.01s)
          Invalid datum, admin redeemer, signature, emergency token - must fail:                                                                                                                                                   OK
          Invalid datum, admin redeemer, signature, both tokens - must fail:                                                                                                                                                       OK (0.02s)
          Invalid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                  OK
          Invalid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                OK (0.01s)
          Invalid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                         OK (0.02s)
          Invalid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                             OK (0.01s)
          Invalid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                     OK (0.01s)
          Invalid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                   OK (0.01s)
          Invalid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                            OK (0.01s)
          Invalid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                OK (0.02s)
        TX NAME: Fund_Delete_Tx - REDEEMER: Fund_Delete - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.05s)
              Having more than one for Fund input must fail (Just Fund_Delete: ["Expected exactly one Fund input"]):                                                                                                               OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.04s)
            InvestUnit Input Tests
              Having valid for InvestUnit input must succeed:                                                                                                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnit input must fail (Nothing: [""]):                                                                                                                   OK (0.03s)
          Minting Tests
            FundID Minting Tests
              Having valid for FundID minting must succeed:                                                                                                                                                                        OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for FundID minting must fail (Nothing: [""]):                                                                                                                     OK (0.04s)
              Using invalid Token Name for FundID minting must fail (Nothing: ["not isBurningIDs"]):                                                                                                                               OK (0.03s)
              Using more token amount for FundID minting must fail (Nothing: ["not isBurningIDs"]):                                                                                                                                OK (0.05s)
            InvestUnitID Minting Tests
              Having valid for InvestUnitID minting must succeed:                                                                                                                                                                  OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnitID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnitID minting must fail (Nothing: [""]):                                                                                                               OK (0.06s)
              Using invalid Token Name for InvestUnitID minting must fail (Nothing: ["not isBurningIDs"]):                                                                                                                         OK (0.04s)
              Using more token amount for InvestUnitID minting must fail (Nothing: ["not isBurningIDs"]):                                                                                                                          OK (0.04s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.06s)
            Using invalid range must fail (Just Fund_Delete: ["not isValidRange"]):                                                                                                                                                OK (0.05s)
            Using no specific range must fail (Just Fund_Delete: ["not isValidRange"]):                                                                                                                                            OK (0.05s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Just Fund_Delete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                                OK (0.03s)
            Using other invalid signatures must fail (Just Fund_Delete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                     OK (0.05s)
    FundHolding Tests
      FundHolding Policy Tests
        TX NAME: FundHolding_Create_Tx - REDEEMER: FundHolding_MintID - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.02s)
              None valid for Fund input must fail (Just FundHolding_MintID: ["Expected exactly one Fund input"]):                                                                                                                  OK (0.02s)
              Having more than one for Fund input must fail (Just FundHolding_MintID: ["Expected exactly one Fund input"]):                                                                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just FundHolding_MintID: ["Expected exactly one Fund input"]):                                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just FundHolding_MintID: ["Expected exactly one Fund input"]):                                                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just FundHolding_MintID: ["Expected exactly one Fund input"]):                                                                      OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just FundHolding_MintID: ["Expected exactly one Fund input"]):                                                                      OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                          OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                   OK (0.04s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                   OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Datum_With_HoldingAdded"]):                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.02s)
              None valid for Fund output must fail (Just FundHolding_MintID: ["Expected at least two outputs to script addresses"]):                                                                                               OK (0.01s)
              Having more than one for Fund output must fail (Just FundHolding_MintID: ["Expected FundHolding at output index 1"]):                                                                                                OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                    OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                    OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                         OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                        OK (0.04s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_FundHoldingAdd: ["not isCorrect_Output_Fund_Datum_With_HoldingAdded"]):                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Just Fund_FundHoldingAdd: ["ERROR EVALUATING SCRIPT"]):                                                                            OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Just Fund_FundHoldingAdd: ["ERROR EVALUATING SCRIPT"]):                                                                                OK (0.03s)
              Having invalid address for Fund output must fail (Just Fund_FundHoldingAdd: ["Expected Fund at output index 0"]):                                                                                                    OK (0.03s)
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.02s)
              None valid for FundHolding output must fail (Just FundHolding_MintID: ["Expected at least two outputs to script addresses"]):                                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_MintID: ["Expected FundHolding at output index 1"]):                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_MintID: ["Expected FundHolding at output index 1"]):                                                                  OK
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_MintID: ["Expected FundHolding at output index 1"]):                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_MintID: ["Expected FundHolding at output index 1"]):                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_MintID: ["not isCorrect_Output_FundHolding_Value"]):                                                       OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_MintID: ["not isCorrect_Output_FundHolding_Value"]):                                                      OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_MintID: ["not isCorrect_Output_FundHolding_Value"]):                                                      OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_MintID: ["not isCorrect_Output_FundHolding_Value"]):                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_MintID: ["not isCorrect_Output_FundHolding_Value"]):                                                           OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Just FundHolding_MintID: ["Expected FundHolding at output index 1"]):                                                                                       OK (0.02s)
          Minting Tests
            FundHoldingID Minting Tests
              Having valid for FundHoldingID minting must succeed:                                                                                                                                                                 OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHoldingID minting must fail (Just FundHolding_MintID: ["ERROR EVALUATING SCRIPT"]):                                                                   OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for FundHoldingID minting must fail (Nothing: [""]):                                                                                                              OK (0.03s)
              Using invalid Token Name for FundHoldingID minting must fail (Just FundHolding_MintID: ["not isMintingFundHoldingID"]):                                                                                              OK (0.02s)
              Using more token amount for FundHoldingID minting must fail (Just FundHolding_MintID: ["not isMintingFundHoldingID"]):                                                                                               OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just FundHolding_MintID: ["not isValidRange"]):                                                                                                                                         OK (0.02s)
            Using no specific range must fail (Just FundHolding_MintID: ["not isValidRange"]):                                                                                                                                     OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Just Fund_FundHoldingAdd: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                        OK (0.03s)
            Using other invalid signatures must fail (Just Fund_FundHoldingAdd: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                             OK (0.03s)
        TX NAME: FundHolding_Delete_Tx - REDEEMER: FundHolding_BurnID - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.04s)
              None valid for Fund input must fail (Just FundHolding_BurnID: ["Expected exactly one Fund input"]):                                                                                                                  OK (0.04s)
              Having more than one for Fund input must fail (Just FundHolding_BurnID: ["Expected exactly one Fund input"]):                                                                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just FundHolding_BurnID: ["Expected exactly one Fund input"]):                                                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just FundHolding_BurnID: ["Expected exactly one Fund input"]):                                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just FundHolding_BurnID: ["Expected exactly one Fund input"]):                                                                      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just FundHolding_BurnID: ["Expected exactly one Fund input"]):                                                                      OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.04s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.04s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.05s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Datum_With_HoldingDeleted"]):                                                  OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.02s)
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              None valid for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                                                                    OK
              Having more than one for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                                                          OK (0.05s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                                   OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                                         OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                              OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                             OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                             OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                             OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                                  OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.04s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.04s)
              None valid for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected at least one output to script addresses"]):                                                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                            OK (0.04s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.05s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Datum_With_HoldingDeleted"]):                                                 OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.03s)
              Having invalid address for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                                                 OK (0.04s)
          Minting Tests
            FundHoldingID Minting Tests
              Having valid for FundHoldingID minting must succeed:                                                                                                                                                                 OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHoldingID minting must fail (Just FundHolding_BurnID: ["ERROR EVALUATING SCRIPT"]):                                                                   OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerType for FundHoldingID minting must fail (Nothing: [""]):                                                                                                              OK (0.04s)
              Using invalid Token Name for FundHoldingID minting must fail (Just FundHolding_BurnID: ["not isBurningFundHoldingID"]):                                                                                              OK (0.04s)
              Using more token amount for FundHoldingID minting must fail (Just FundHolding_BurnID: ["not isBurningFundHoldingID"]):                                                                                               OK (0.04s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.03s)
            Using invalid range must fail (Just FundHolding_BurnID: ["not isValidRange"]):                                                                                                                                         OK (0.02s)
            Using no specific range must fail (Just FundHolding_BurnID: ["not isValidRange"]):                                                                                                                                     OK (0.04s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.03s)
            Using no signatures must fail (Just Fund_FundHoldingDelete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                     OK (0.03s)
            Using other invalid signatures must fail (Just Fund_FundHoldingDelete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                          OK (0.03s)
      FundHolding Validator Tests
        TX NAME: FundHolding_UpdateMinADA_Tx - REDEEMER: FundHolding_UpdateMinADA - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.02s)
              None valid for Fund input ref must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                                                    OK (0.03s)
              Having more than one for Fund input ref must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                                          OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                   OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                   OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                        OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.04s)
              Having more than one for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["Expected exactly one FundHolding input"]):                                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                                          OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                                          OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                               OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                               OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                              OK
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                              OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                                   OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.04s)
              None valid for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["Expected at least one output to script addresses"]):                                                                                   OK (0.02s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["Expected FundHolding at output index 0"]):                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["Expected FundHolding at output index 0"]):                                                            OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["Expected FundHolding at output index 0"]):                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["Expected FundHolding at output index 0"]):                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                              OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                             OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                             OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["not isCorrect_Output_FundHolding_Value_With_MinADAChanged"]):                                  OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Having invalid address for FundHolding output must fail (Just FundHolding_UpdateMinADA: ["Expected FundHolding at output index 0"]):                                                                                 OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just FundHolding_UpdateMinADA: ["not isValidRange"]):                                                                                                                                   OK (0.03s)
            Using no specific range must fail (Just FundHolding_UpdateMinADA: ["not isValidRange"]):                                                                                                                               OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Just FundHolding_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                   OK (0.03s)
            Using other invalid signatures must fail (Just FundHolding_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                        OK (0.03s)
          Property Based Tests
            Having Valid Min ADA positive must succeed:                                                                                                                                                                            OK (2.88s)
              +++ OK, passed 100 tests.
            Having Invalid Min ADA negative must fail (Just FundHolding_UpdateMinADA: ["not min ADA > 0"]):                                                                                                                        OK (3.08s)
              +++ OK, passed 100 tests.
        TX NAME: Fund_Deposit_Tx - REDEEMER: FundHolding_Deposit - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.04s)
              None valid for Fund input ref must fail (Just FundHolding_Deposit: ["Expected exactly one Fund input ref"]):                                                                                                         OK (0.05s)
              Having more than one for Fund input ref must fail (Just FundHolding_Deposit: ["Expected exactly one Fund input ref"]):                                                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_Deposit: ["Expected exactly one Fund input ref"]):                                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_Deposit: ["Expected exactly one Fund input ref"]):                                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_Deposit: ["Expected exactly one Fund input ref"]):                                                             OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_Deposit: ["Expected exactly one Fund input ref"]):                                                             OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
            InvestUnit Input Ref Tests
              Having valid for InvestUnit input ref must succeed:                                                                                                                                                                  OK (0.03s)
              None valid for InvestUnit input ref must fail (Just FundHolding_Deposit: ["Expected exactly one InvestUnit input ref"]):                                                                                             OK (0.03s)
              Having more than one for InvestUnit input ref must fail (Just FundHolding_Deposit: ["Expected exactly one InvestUnit input ref"]):                                                                                   OK (0.04s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input ref must fail (Just FundHolding_Deposit: ["Expected exactly one InvestUnit input ref"]):                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenTN for InvestUnit input ref must fail (Just FundHolding_Deposit: ["Expected exactly one InvestUnit input ref"]):                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input ref must fail (Just FundHolding_Deposit: ["Expected exactly one InvestUnit input ref"]):                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input ref must fail (Just FundHolding_Deposit: ["Expected exactly one InvestUnit input ref"]):                                                 OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.01s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_Deposit: ["Expected exactly one FundHolding input"]):                                                                                         OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                               OK (0.05s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                    OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                    OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                    OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                   OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                   OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                   OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Datum_With_Deposit"]):                                              OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_Deposit: ["not isMintingFT"]):                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.04s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.03s)
              None valid for FundHolding output must fail (Just FundHolding_Deposit: ["Expected at least one output to script addresses"]):                                                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_Deposit: ["Expected FundHolding at output index 0"]):                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_Deposit: ["Expected FundHolding at output index 0"]):                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Deposit: ["Expected FundHolding at output index 0"]):                                                      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Deposit: ["Expected FundHolding at output index 0"]):                                                      OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                   OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                  OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                  OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Value_With_Tokens_And_FT"]):                                  OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_Deposit: ["not isCorrect_Output_FundHolding_Datum_With_Deposit"]):                                             OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Just FundHolding_Deposit: ["Expected FundHolding at output index 0"]):                                                                                      OK (0.03s)
          Minting Tests
            FundFT Minting Tests
              Having valid for FundFT minting must succeed:                                                                                                                                                                        OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundFT minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for FundFT minting must fail (Nothing: [""]):                                                                                                                     OK (0.01s)
              Using invalid Token Name for FundFT minting must fail (Just FundHolding_Deposit: ["not isMintingFT"]):                                                                                                               OK (0.05s)
              Using less token amount for FundFT minting must fail (Just FundHolding_Deposit: ["not isMintingFT"]):                                                                                                                OK (0.03s)
              Using more token amount for FundFT minting must fail (Just FundHolding_Deposit: ["not isMintingFT"]):                                                                                                                OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.04s)
            Using invalid range must fail (Just FundHolding_Deposit: ["not isValidRange"]):                                                                                                                                        OK (0.03s)
            Using no specific range must fail (Just FundHolding_Deposit: ["not isValidRange"]):                                                                                                                                    OK (0.03s)
          Specific Tests
            Having Valid DepositDate on BeginAt must succeed:                                                                                                                                                                      OK (0.03s)
            Having Valid DepositDate on Deadline must succeed:                                                                                                                                                                     OK (0.05s)
            Having Invalid Deposit with Fund Closed must fail (Just Fund_MintFT: ["not isFundOpen"]):                                                                                                                              OK (0.02s)
          Property Based Tests
            Having Valid Deposit must succeed:                                                                                                                                                                                     OK (4.03s)
              +++ OK, passed 100 tests.
            Having Deposit very small must succeed:                                                                                                                                                                                OK (3.95s)
              +++ OK, passed 100 tests.
            Having Deposit max must succeed:                                                                                                                                                                                       OK (3.90s)
              +++ OK, passed 100 tests.
            Having Deposit with 0% commission rate must succeed:                                                                                                                                                                   OK (3.94s)
              +++ OK, passed 100 tests.
            Having Deposit with max commission rate must succeed:                                                                                                                                                                  OK (3.83s)
              +++ OK, passed 100 tests.
            Having Invalid quantity of Tokens in Invest Unit must fail (Just FundHolding_Deposit: ["Memory usage exceeds limit*"]):                                                                                                OK (4.27s)
              +++ OK, passed 100 tests.
            Having Invalid Deposit amount <= 0 must fail (Just FundHolding_Deposit: ["not Correct Deposit Amount"]):                                                                                                               OK (3.89s)
              +++ OK, passed 100 tests.
            Having Invalid Deposit amount >= MAX must fail (Just FundHolding_Deposit: ["not Correct Deposit Amount"]):                                                                                                             OK (3.84s)
              +++ OK, passed 100 tests.
            Having Invalid Deposit amount not multiplier of Invest Unit granularity must fail (Just FundHolding_Deposit: ["not Correct Deposit Amount"]):                                                                          OK (3.70s)
              +++ OK, passed 100 tests.
            Having Valid Deposit with MinLifeTime must succeed:                                                                                                                                                                    OK (3.71s)
              +++ OK, passed 100 tests.
            Having Invalid DepositDate too early must fail (Just Fund_MintFT: ["not isFundOpen"]):                                                                                                                                 OK (3.21s)
              +++ OK, passed 100 tests.
            Having Invalid DepositDate too late must fail (Just Fund_MintFT: ["not isFundOpen"]):                                                                                                                                  OK (3.17s)
              +++ OK, passed 100 tests.
        TX NAME: Fund_Withdraw_Tx - REDEEMER: FundHolding_Withdraw - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.05s)
              None valid for Fund input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one Fund input ref"]):                                                                                                        OK (0.03s)
              Having more than one for Fund input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one Fund input ref"]):                                                                                              OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one Fund input ref"]):                                                                       OK (0.04s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one Fund input ref"]):                                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one Fund input ref"]):                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one Fund input ref"]):                                                            OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
            InvestUnit Input Ref Tests
              Having valid for InvestUnit input ref must succeed:                                                                                                                                                                  OK (0.03s)
              None valid for InvestUnit input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one InvestUnit input ref"]):                                                                                            OK (0.04s)
              Having more than one for InvestUnit input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one InvestUnit input ref"]):                                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one InvestUnit input ref"]):                                                           OK (0.01s)
              Having invalid ID value with InvalidTokenTN for InvestUnit input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one InvestUnit input ref"]):                                                           OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one InvestUnit input ref"]):                                                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input ref must fail (Just FundHolding_Withdraw: ["Expected exactly one InvestUnit input ref"]):                                                OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_Withdraw: ["Expected exactly one FundHolding input"]):                                                                                        OK (0.05s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                           OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                           OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):                OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):               OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):               OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):               OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Datum_With_Withdraw"]):                                            OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_Withdraw: ["not Correct Comissions"]):                                                                          OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.03s)
              None valid for FundHolding output must fail (Just FundHolding_Withdraw: ["Expected at least one output to script addresses"]):                                                                                       OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_Withdraw: ["Expected FundHolding at output index 0"]):                                                                OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_Withdraw: ["Expected FundHolding at output index 0"]):                                                                OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Withdraw: ["Expected FundHolding at output index 0"]):                                                     OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Withdraw: ["Expected FundHolding at output index 0"]):                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):               OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):              OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):              OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Value_Without_Tokens_And_FT_for_Commissions"]):              OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_Withdraw: ["not isCorrect_Output_FundHolding_Datum_With_Withdraw"]):                                           OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Having invalid address for FundHolding output must fail (Just FundHolding_Withdraw: ["Expected FundHolding at output index 0"]):                                                                                     OK (0.04s)
          Minting Tests
            FundFT Minting Tests
              Having valid for FundFT minting must succeed:                                                                                                                                                                        OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundFT minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundFT minting must fail (Nothing: [""]):                                                                                                                     OK (0.04s)
              Using invalid Token Name for FundFT minting must fail (Just FundHolding_Withdraw: ["not isBurningFT"]):                                                                                                              OK (0.04s)
              Using less token amount for FundFT minting must fail (Just FundHolding_Withdraw: ["not isBurningFT"]):                                                                                                               OK (0.03s)
              Using more token amount for FundFT minting must fail (Just FundHolding_Withdraw: ["not isBurningFT"]):                                                                                                               OK (0.04s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.03s)
            Using invalid range must fail (Just FundHolding_Withdraw: ["not isValidRange"]):                                                                                                                                       OK (0.03s)
            Using no specific range must fail (Just FundHolding_Withdraw: ["not isValidRange"]):                                                                                                                                   OK (0.04s)
          Specific Tests
            Having Valid WithdrawDate on BeginAt must succeed:                                                                                                                                                                     OK (0.03s)
            Having Valid WithdrawDate on Deadline must succeed:                                                                                                                                                                    OK (0.02s)
            Having Valid Withdraw with Fund Closed must succeed:                                                                                                                                                                   OK (0.04s)
          Property Based Tests
            Having Valid Withdraw must succeed:                                                                                                                                                                                    OK (3.93s)
              +++ OK, passed 100 tests.
            Having Withdraw very small must succeed:                                                                                                                                                                               OK (3.92s)
              +++ OK, passed 100 tests.
            Having Withdraw max must succeed:                                                                                                                                                                                      OK (3.92s)
              +++ OK, passed 100 tests.
            Having Withdraw with 0% commission rate must succeed:                                                                                                                                                                  OK (4.01s)
              +++ OK, passed 100 tests.
            Having Withdraw with max commission rate must succeed:                                                                                                                                                                 OK (3.96s)
              +++ OK, passed 100 tests.
            Having Invalid quantity of Tokens in Invest Unit must fail (Just FundHolding_Withdraw: ["Memory usage exceeds limit*"]):                                                                                               OK (4.55s)
              +++ OK, passed 100 tests.
            Having Invalid Withdraw amount <= 0 must fail (Just FundHolding_Withdraw: ["not Correct Withdraw Amount"]):                                                                                                            OK (3.95s)
              +++ OK, passed 100 tests.
            Having Invalid Withdraw amount >= MAX must fail (Just FundHolding_Withdraw: ["not Correct Withdraw Amount"]):                                                                                                          OK (3.94s)
              +++ OK, passed 100 tests.
            Having Invalid Withdraw amount not multiplier of Invest Unit granularity must fail (Just FundHolding_Withdraw: ["not Correct Withdraw Amount"]):                                                                       OK (4.30s)
              +++ OK, passed 100 tests.
            Having Valid Withdraw with MinLifeTime must succeed:                                                                                                                                                                   OK (4.31s)
              +++ OK, passed 100 tests.
            Having Valid WithdrawDate too late must succeed:                                                                                                                                                                       OK (4.34s)
              +++ OK, passed 100 tests.
            Having Invalid Withdraw Commissions amount must fail (Just FundHolding_Withdraw: ["not isEnough_FT_ForComission"]):                                                                                                    OK (5.73s)
              +++ OK, passed 100 tests.
        TX NAME: FundHolding_Collect_Protocol_Commission_Tx - REDEEMER: FundHolding_Collect_Protocol_Commission - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.01s)
              None valid for Protocol input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Protocol input ref"]):                                                                             OK (0.04s)
              Having more than one for Protocol input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Protocol input ref"]):                                                                   OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Protocol input ref"]):                                            OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Protocol input ref"]):                                            OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Protocol input ref"]):                                 OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Protocol input ref"]):                                 OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Fund input ref"]):                                                                                     OK (0.03s)
              Having more than one for Fund input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Fund input ref"]):                                                                           OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Fund input ref"]):                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Fund input ref"]):                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Fund input ref"]):                                         OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one Fund input ref"]):                                         OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.05s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected exactly one FundHolding input"]):                                                                     OK (0.02s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):                   OK (0.04s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):                   OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):        OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):        OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):        OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Datum_With_Collect_Protocol_Commission"]):      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_Collect_Protocol_Commission: ["not isDateInRange"]):                                                            OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.03s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.03s)
              None valid for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected at least one output to script addresses"]):                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected FundHolding at output index 0"]):                                             OK (0.04s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected FundHolding at output index 0"]):                                             OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected FundHolding at output index 0"]):                                  OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected FundHolding at output index 0"]):                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["not isCorrect_Output_FundHolding_Datum_With_Collect_Protocol_Commission"]):     OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Just FundHolding_Collect_Protocol_Commission: ["Expected FundHolding at output index 0"]):                                                                  OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.04s)
            Using invalid range must fail (Just FundHolding_Collect_Protocol_Commission: ["not isValidRange"]):                                                                                                                    OK (0.01s)
            Using no specific range must fail (Just FundHolding_Collect_Protocol_Commission: ["not isValidRange"]):                                                                                                                OK (0.03s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.05s)
            Using no signatures must fail (Just FundHolding_Collect_Protocol_Commission: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                    OK (0.02s)
            Using other invalid signatures must fail (Just FundHolding_Collect_Protocol_Commission: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                         OK (0.01s)
        TX NAME: FundHolding_Collect_Managers_Commission_Tx - REDEEMER: FundHolding_Collect_Managers_Commission - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.03s)
              None valid for Protocol input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Protocol input ref"]):                                                                             OK (0.02s)
              Having more than one for Protocol input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Protocol input ref"]):                                                                   OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Protocol input ref"]):                                            OK (0.04s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Protocol input ref"]):                                            OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Protocol input ref"]):                                 OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Protocol input ref"]):                                 OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Fund input ref"]):                                                                                     OK (0.02s)
              Having more than one for Fund input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Fund input ref"]):                                                                           OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Fund input ref"]):                                                    OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Fund input ref"]):                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Fund input ref"]):                                         OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one Fund input ref"]):                                         OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["Expected exactly one FundHolding input"]):                                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):                   OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):                   OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):        OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):        OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):        OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Datum_With_Collect_Managers_Commission"]):      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_Collect_Managers_Commission: ["not isDateInRange"]):                                                            OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.02s)
              None valid for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["Expected at least one output to script addresses"]):                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["Expected FundHolding at output index 0"]):                                             OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["Expected FundHolding at output index 0"]):                                             OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["Expected FundHolding at output index 0"]):                                  OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["Expected FundHolding at output index 0"]):                                  OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):       OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["not isCorrect_Output_FundHolding_Datum_With_Collect_Managers_Commission"]):     OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
              Having invalid address for FundHolding output must fail (Just FundHolding_Collect_Managers_Commission: ["Expected FundHolding at output index 0"]):                                                                  OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just FundHolding_Collect_Managers_Commission: ["not isValidRange"]):                                                                                                                    OK (0.02s)
            Using no specific range must fail (Just FundHolding_Collect_Managers_Commission: ["not isValidRange"]):                                                                                                                OK
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.03s)
            Using no signatures must fail (Just FundHolding_Collect_Managers_Commission: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                    OK (0.04s)
            Using other invalid signatures must fail (Just FundHolding_Collect_Managers_Commission: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                         OK (0.03s)
        TX NAME: FundHolding_Collect_Delegators_Commission_Tx - REDEEMER: FundHolding_Collect_Delegators_Commission - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.03s)
              None valid for Protocol input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Protocol input ref"]):                                                                           OK (0.04s)
              Having more than one for Protocol input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Protocol input ref"]):                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Protocol input ref"]):                                          OK (0.04s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Protocol input ref"]):                                          OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Protocol input ref"]):                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Protocol input ref"]):                               OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Fund input ref"]):                                                                                   OK (0.04s)
              Having more than one for Fund input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Fund input ref"]):                                                                         OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Fund input ref"]):                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Fund input ref"]):                                                  OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Fund input ref"]):                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one Fund input ref"]):                                       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected exactly one FundHolding input"]):                                                                   OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):                 OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):                 OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):     OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):     OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):     OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Datum_With_Collect_Delegators_Commission"]):  OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_Collect_Delegators_Commission: ["not isDateInRange"]):                                                          OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.03s)
              None valid for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected at least one output to script addresses"]):                                                                  OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected FundHolding at output index 0"]):                                           OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected FundHolding at output index 0"]):                                           OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected FundHolding at output index 0"]):                                OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected FundHolding at output index 0"]):                                OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):     OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):    OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):    OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Value_Without_FT_for_Commissions"]):    OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["not isCorrect_Output_FundHolding_Datum_With_Collect_Delegators_Commission"]): OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
              Having invalid address for FundHolding output must fail (Just FundHolding_Collect_Delegators_Commission: ["Expected FundHolding at output index 0"]):                                                                OK (0.04s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.03s)
            Using invalid range must fail (Just FundHolding_Collect_Delegators_Commission: ["not isValidRange"]):                                                                                                                  OK (0.03s)
            Using no specific range must fail (Just FundHolding_Collect_Delegators_Commission: ["not isValidRange"]):                                                                                                              OK (0.04s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.03s)
            Using no signatures must fail (Just FundHolding_Collect_Delegators_Commission: ["not isSignedByAny delegatorsAdmins"]):                                                                                                OK (0.03s)
            Using other invalid signatures must fail (Just FundHolding_Collect_Delegators_Commission: ["not isSignedByAny delegatorsAdmins"]):                                                                                     OK (0.03s)
        TX NAME: Fund_ReIndexing_Tx - REDEEMER: FundHolding_ReIndexing - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.04s)
              None valid for Protocol input ref must fail (Nothing: ["Expected exactly one Protocol input ref"]):                                                                                                                  OK (0.04s)
              Having more than one for Protocol input ref must fail (Nothing: ["Expected exactly one Protocol input ref"]):                                                                                                        OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Nothing: ["Expected exactly one Protocol input ref"]):                                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Nothing: ["Expected exactly one Protocol input ref"]):                                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Nothing: ["Expected exactly one Protocol input ref"]):                                                                      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Nothing: ["Expected exactly one Protocol input ref"]):                                                                      OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.06s)
              None valid for Fund input ref must fail (Just FundHolding_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                                                      OK (0.03s)
              Having more than one for Fund input ref must fail (Just FundHolding_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                                            OK (0.05s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_ReIndexing: ["Expected exactly one Fund input ref"]):                                                          OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_ReIndexing: ["Expected exactly one Fund input ref"]):                                                          OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_ReIndexing: ["Expected exactly one FundHolding input"]):                                                                                      OK (0.05s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                           OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                           OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                               OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                               OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                               OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Datum_NotChanged"]):                                             OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                    OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
            InvestUnit Input Tests
              Having valid for InvestUnit input must succeed:                                                                                                                                                                      OK (0.05s)
              None valid for InvestUnit input must fail (Just FundHolding_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                                                                  OK (0.03s)
              Having more than one for InvestUnit input must fail (Just FundHolding_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                                                        OK (0.05s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input must fail (Just FundHolding_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenTN for InvestUnit input must fail (Just FundHolding_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                                 OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input must fail (Just FundHolding_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                      OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input must fail (Just FundHolding_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit input must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                               OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit input must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                              OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit input must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                              OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit input must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                              OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit input must fail (Nothing: ["not isCorrect_Output_InvestUnit_Datum_WithTokensExchanged"]):                                                          OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerData for InvestUnit input must fail (Just FundHolding_ReIndexing: ["not isCorrect_Redeemer_InvestUnit"]):                                                              OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnit input must fail (Nothing: [""]):                                                                                                                   OK (0.03s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.04s)
              None valid for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                                                   OK (0.02s)
              Having more than one for FundHolding output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                                                          OK (0.03s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                   OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                  OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                  OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_NotChanged"]):                                                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Having invalid address for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                                       OK (0.02s)
            InvestUnit Outputs Tests
              Having valid for InvestUnit output must succeed:                                                                                                                                                                     OK (0.05s)
              None valid for InvestUnit output must fail (Nothing: ["Expected at least two outputs to script addresses"]):                                                                                                         OK (0.03s)
              Having invalid ID value with InvalidTokenCS for InvestUnit output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenTN for InvestUnit output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                         OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                         OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit output must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                              OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                             OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit output must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                             OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit output must fail (Nothing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                             OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit output must fail (Nothing: ["not isCorrect_Output_InvestUnit_Datum_WithTokensExchanged"]):                                                         OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.05s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.03s)
              Having invalid address for InvestUnit output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                                                         OK (0.04s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.05s)
            Using invalid range must fail (Just FundHolding_ReIndexing: ["not isValidRange"]):                                                                                                                                     OK (0.03s)
            Using no specific range must fail (Just FundHolding_ReIndexing: ["not isValidRange"]):                                                                                                                                 OK (0.04s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Nothing: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                                         OK (0.05s)
            Using other invalid signatures must fail (Nothing: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                              OK (0.03s)
        TX NAME: FundHolding_BalanceAssets_Tx - REDEEMER: FundHolding_BalanceAssets - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.07s)
              None valid for Fund input ref must fail (Just FundHolding_BalanceAssets: ["Expected exactly one Fund input ref"]):                                                                                                   OK (0.03s)
              Having more than one for Fund input ref must fail (Just FundHolding_BalanceAssets: ["Expected exactly one Fund input ref"]):                                                                                         OK (0.05s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just FundHolding_BalanceAssets: ["Expected exactly one Fund input ref"]):                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just FundHolding_BalanceAssets: ["Expected exactly one Fund input ref"]):                                                                  OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just FundHolding_BalanceAssets: ["Expected exactly one Fund input ref"]):                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just FundHolding_BalanceAssets: ["Expected exactly one Fund input ref"]):                                                       OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.06s)
              None valid for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                                      OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                            OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                                 OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                          OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                          OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                      OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.06s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Outputs_FundHoldingDatums_With_UpdatedCommissionsAndRate"]):                     OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Outputs_FundHoldingDatums_With_UpdatedCommissionsAndRate"]):                     OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.02s)
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.06s)
              None valid for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                                      OK (0.03s)
              Having more than one for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                            OK (0.05s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                     OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                                 OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                          OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                          OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                      OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.05s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Outputs_FundHoldingDatums_With_UpdatedCommissionsAndRate"]):                     OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Outputs_FundHoldingDatums_With_UpdatedCommissionsAndRate"]):                     OK (0.07s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.05s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.06s)
              None valid for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                                     OK (0.05s)
              Having more than one for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                           OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                    OK (0.05s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                                OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                         OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                         OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                    OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                    OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                    OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Outputs_FundHoldingDatums_With_UpdatedCommissionsAndRate"]):                    OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                         OK (0.04s)
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.07s)
              None valid for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                                     OK (0.04s)
              Having more than one for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                           OK (0.04s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                    OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                                OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                         OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                         OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                     OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                    OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                    OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Output_FundHolding_Values_SameTotal"]):                                    OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not isCorrect_Outputs_FundHoldingDatums_With_UpdatedCommissionsAndRate"]):                    OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.04s)
              Having invalid address for FundHolding output must fail (Just FundHolding_BalanceAssets: ["not cantInputs == cantOutputs"]):                                                                                         OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.07s)
            Using invalid range must fail (Just FundHolding_BalanceAssets: ["not isValidRange"]):                                                                                                                                  OK (0.04s)
            Using no specific range must fail (Just FundHolding_BalanceAssets: ["not isValidRange"]):                                                                                                                              OK (0.04s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.06s)
            Using no signatures must fail (Just FundHolding_BalanceAssets: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                  OK (0.05s)
            Using other invalid signatures must fail (Just FundHolding_BalanceAssets: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                       OK (0.04s)
        TX NAME: FundHolding_Emergency_Tx - REDEEMER: FundHolding_Emergency - Tests
          Valid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                        OK (0.03s)
          Valid datum, admin redeemer, no signature, admin token - must succeed:                                                                                                                                                   OK (0.02s)
          Valid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                  OK (0.02s)
          Valid datum, admin redeemer, no signature, both tokens - must succeed:                                                                                                                                                   OK (0.02s)
          Valid datum, admin redeemer, signature, no tokens - must succeed:                                                                                                                                                        OK
          Valid datum, admin redeemer, signature, admin token - must succeed:                                                                                                                                                      OK (0.03s)
          Valid datum, admin redeemer, signature, emergency token - must succeed:                                                                                                                                                  OK (0.02s)
          Valid datum, admin redeemer, signature, both tokens - must succeed:                                                                                                                                                      OK (0.02s)
          Valid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                    OK (0.01s)
          Valid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                  OK (0.02s)
          Valid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                           OK (0.02s)
          Valid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                               OK (0.02s)
          Valid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                       OK (0.02s)
          Valid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                     OK (0.02s)
          Valid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                              OK (0.03s)
          Valid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                  OK (0.02s)
          Invalid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                      OK (0.01s)
          Invalid datum, admin redeemer, no signature, admin token - must fail:                                                                                                                                                    OK (0.03s)
          Invalid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                OK (0.02s)
          Invalid datum, admin redeemer, no signature, both tokens - must fail:                                                                                                                                                    OK (0.03s)
          Invalid datum, admin redeemer, signature, no tokens - must fail:                                                                                                                                                         OK (0.03s)
          Invalid datum, admin redeemer, signature, admin token - must fail:                                                                                                                                                       OK (0.03s)
          Invalid datum, admin redeemer, signature, emergency token - must fail:                                                                                                                                                   OK (0.02s)
          Invalid datum, admin redeemer, signature, both tokens - must fail:                                                                                                                                                       OK (0.03s)
          Invalid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                  OK (0.01s)
          Invalid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                OK (0.02s)
          Invalid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                         OK (0.02s)
          Invalid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                             OK (0.02s)
          Invalid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                     OK (0.03s)
          Invalid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                   OK (0.02s)
          Invalid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                            OK (0.02s)
          Invalid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                OK (0.02s)
        TX NAME: FundHolding_Delete_Tx - REDEEMER: FundHolding_Delete - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.05s)
              None valid for Fund input must fail (Just Fund_FundHoldingDelete: ["Expected exactly one Fund input"]):                                                                                                              OK (0.04s)
              Having more than one for Fund input must fail (Just Fund_FundHoldingDelete: ["Expected exactly one Fund input"]):                                                                                                    OK (0.05s)
              Having invalid ID value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                  OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.05s)
              Having invalid MAYZ value with InvalidTokenCS for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.04s)
              Having invalid MAYZ value with InvalidTokenTN for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                                OK (0.05s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.05s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for Fund input must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Datum_With_HoldingDeleted"]):                                                  OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.03s)
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.04s)
              Having more than one for FundHolding input must fail (Just FundHolding_Delete: ["Expected exactly one FundHolding input"]):                                                                                          OK (0.06s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                                   OK (0.05s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                                         OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                        OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BurnID: ["Expected exactly one FundHolding input"]):                                                        OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                              OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                             OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                             OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                             OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Just FundHolding_BurnID: ["not isZeroAssets"]):                                                                                  OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.05s)
          Outputs Tests
            Fund Outputs Tests
              Having valid for Fund output must succeed:                                                                                                                                                                           OK (0.04s)
              None valid for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected at least one output to script addresses"]):                                                                                            OK (0.05s)
              Having invalid ID value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                            OK (0.03s)
              Having invalid ID value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                            OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                      OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                     OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.05s)
              Having invalid MAYZ value with InvalidTokenTN for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                               OK (0.04s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.05s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Value_NotChanged"]):                                                    OK (0.05s)
              Using an invalid datum with InvalidEntityDatumData for Fund output must fail (Just Fund_FundHoldingDelete: ["not isCorrect_Output_Fund_Datum_With_HoldingDeleted"]):                                                 OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                 OK (0.04s)
              Having invalid address for Fund output must fail (Just Fund_FundHoldingDelete: ["Expected Fund at output index 0"]):                                                                                                 OK (0.03s)
          Minting Tests
            FundHoldingID Minting Tests
              Having valid for FundHoldingID minting must succeed:                                                                                                                                                                 OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHoldingID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                   OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerType for FundHoldingID minting must fail (Nothing: [""]):                                                                                                              OK (0.06s)
              Using invalid Token Name for FundHoldingID minting must fail (Just FundHolding_BurnID: ["not isBurningFundHoldingID"]):                                                                                              OK (0.04s)
              Using more token amount for FundHoldingID minting must fail (Just FundHolding_Delete: ["not isBurningFundHoldingID"]):                                                                                               OK (0.05s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.05s)
            Using invalid range must fail (Just FundHolding_Delete: ["not isValidRange"]):                                                                                                                                         OK (0.06s)
            Using no specific range must fail (Just FundHolding_Delete: ["not isValidRange"]):                                                                                                                                     OK (0.05s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Just Fund_FundHoldingDelete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                     OK (0.05s)
            Using other invalid signatures must fail (Just Fund_FundHoldingDelete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                          OK (0.03s)
    InvestUnit Tests
      InvestUnit Validator Tests
        TX NAME: Fund_ReIndexing_Tx - REDEEMER: InvestUnit_ReIndexing - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.04s)
              None valid for Protocol input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Protocol input ref"]):                                                                                               OK (0.03s)
              Having more than one for Protocol input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Protocol input ref"]):                                                                                     OK (0.04s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Protocol input ref"]):                                                              OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Protocol input ref"]):                                                              OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Protocol input ref"]):                                                   OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Protocol input ref"]):                                                   OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.03s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.05s)
              None valid for Fund input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                                                       OK (0.02s)
              Having more than one for Fund input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                                             OK (0.05s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                      OK (0.04s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Fund input ref"]):                                                                      OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Fund input ref"]):                                                           OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just InvestUnit_ReIndexing: ["Expected exactly one Fund input ref"]):                                                           OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
          Inputs Consume Tests
            FundHolding Input Tests
              Having valid for FundHolding input must succeed:                                                                                                                                                                     OK (0.05s)
              None valid for FundHolding input must fail (Just InvestUnit_ReIndexing: ["Expected exactly one FundHolding input"]):                                                                                                 OK (0.01s)
              Having more than one for FundHolding input must fail (Just InvestUnit_ReIndexing: ["Expected exactly one FundHolding input"]):                                                                                       OK (0.07s)
              Having invalid ID value with InvalidTokenCS for FundHolding input must fail (Just InvestUnit_ReIndexing: ["Expected exactly one FundHolding input"]):                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenTN for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                               OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding input must fail (Just InvestUnit_ReIndexing: ["Expected exactly one FundHolding input"]):                                                     OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding input must fail (Just InvestUnit_ReIndexing: ["Expected exactly one FundHolding input"]):                                                     OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                    OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                   OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                   OK
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                   OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_NotChanged"]):                                                                 OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for FundHolding input must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                        OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundHolding input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for FundHolding input must fail (Nothing: [""]):                                                                                                                  OK (0.03s)
            InvestUnit Input Tests
              Having valid for InvestUnit input must succeed:                                                                                                                                                                      OK (0.05s)
              Having more than one for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["Expected exactly one InvestUnit input"]):                                                                                         OK (0.04s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                       OK (0.05s)
              Having invalid ID value with InvalidTokenTN for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                            OK (0.05s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                            OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                            OK (0.05s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                           OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                           OK (0.04s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                           OK (0.03s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Datum_WithTokensExchanged"]):                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for InvestUnit input must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Redeemer_FundHolding"]):                                                              OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnit input must fail (Nothing: [""]):                                                                                                                   OK (0.02s)
          Outputs Tests
            FundHolding Outputs Tests
              Having valid for FundHolding output must succeed:                                                                                                                                                                    OK (0.04s)
              None valid for FundHolding output must fail (Just InvestUnit_ReIndexing: [""]):                                                                                                                                      OK (0.04s)
              Having more than one for FundHolding output must fail (Just InvestUnit_ReIndexing: ["Expected InvestUnit at output index 1"]):                                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenCS for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.03s)
              Having invalid ID value with InvalidTokenTN for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                       OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                   OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                  OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Value_WithTokensExchanged"]):                                                  OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for FundHolding output must fail (Nothing: ["not isCorrect_Output_FundHolding_Datum_NotChanged"]):                                                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for FundHolding output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Having invalid address for FundHolding output must fail (Nothing: ["Expected FundHolding at output index 0"]):                                                                                                       OK (0.03s)
            InvestUnit Outputs Tests
              Having valid for InvestUnit output must succeed:                                                                                                                                                                     OK (0.05s)
              None valid for InvestUnit output must fail (Nothing: [""]):                                                                                                                                                          OK (0.03s)
              Having invalid ID value with InvalidTokenCS for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["Expected InvestUnit at output index 1"]):                                                                 OK (0.03s)
              Having invalid ID value with InvalidTokenTN for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["Expected InvestUnit at output index 1"]):                                                                 OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["Expected InvestUnit at output index 1"]):                                                      OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["Expected InvestUnit at output index 1"]):                                                      OK (0.04s)
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                           OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                          OK (0.07s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                          OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Value_NotChanged"]):                                          OK (0.04s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit output must fail (Just InvestUnit_ReIndexing: ["not isCorrect_Output_InvestUnit_Datum_WithTokensExchanged"]):                                      OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.03s)
              Having invalid address for InvestUnit output must fail (Nothing: ["Expected InvestUnit at output index 1"]):                                                                                                         OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just InvestUnit_ReIndexing: ["not isValidRange"]):                                                                                                                                      OK (0.04s)
            Using no specific range must fail (Just InvestUnit_ReIndexing: ["Interval has no lower bound"]):                                                                                                                       OK (0.05s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Just InvestUnit_ReIndexing: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                      OK (0.04s)
            Using other invalid signatures must fail (Just InvestUnit_ReIndexing: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                           OK (0.04s)
        TX NAME: InvestUnit_UpdateMinADA_Tx - REDEEMER: InvestUnit_UpdateMinADA - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                                                     OK (0.02s)
              Having more than one for Fund input ref must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                                           OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                    OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                    OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                         OK
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                         OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
          Inputs Consume Tests
            InvestUnit Input Tests
              Having valid for InvestUnit input must succeed:                                                                                                                                                                      OK (0.02s)
              Having more than one for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["Expected exactly one InvestUnit input"]):                                                                                       OK (0.03s)
              Having invalid ID value with InvalidTokenCS for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                             OK (0.03s)
              Having invalid ID value with InvalidTokenTN for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                             OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                  OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                 OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                 OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                 OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit input must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                      OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnit input must fail (Nothing: [""]):                                                                                                                   OK
          Outputs Tests
            InvestUnit Outputs Tests
              Having valid for InvestUnit output must succeed:                                                                                                                                                                     OK (0.02s)
              None valid for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["Expected at least one output to script addresses"]):                                                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenCS for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["Expected InvestUnit at output index 0"]):                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenTN for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["Expected InvestUnit at output index 0"]):                                                               OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["Expected InvestUnit at output index 0"]):                                                    OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["Expected InvestUnit at output index 0"]):                                                    OK
              Having invalid ID value with InvalidTokenAmount (More) for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                 OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                OK (0.03s)
              Having invalid ADA value with InvalidTokenAmount (More) for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["not isCorrect_Output_InvestUnit_Value_With_MinADAChanged"]):                                     OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                       OK
              Using an invalid datum with InvalidEntityDatumType for InvestUnit output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                           OK (0.01s)
              Having invalid address for InvestUnit output must fail (Just InvestUnit_UpdateMinADA: ["Expected InvestUnit at output index 0"]):                                                                                    OK (0.03s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just InvestUnit_UpdateMinADA: ["not isValidRange"]):                                                                                                                                    OK
            Using no specific range must fail (Just InvestUnit_UpdateMinADA: ["not isValidRange"]):                                                                                                                                OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.02s)
            Using no signatures must fail (Just InvestUnit_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                    OK (0.03s)
            Using other invalid signatures must fail (Just InvestUnit_UpdateMinADA: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                         OK (0.02s)
          Property Based Tests
            Having Valid Min ADA positive must succeed:                                                                                                                                                                            OK (2.16s)
              +++ OK, passed 100 tests.
            Having Invalid Min ADA negative must fail (Just InvestUnit_UpdateMinADA: ["not min ADA > 0"]):                                                                                                                         OK (2.16s)
              +++ OK, passed 100 tests.
        TX NAME: InvestUnit_Emergency_Tx - REDEEMER: InvestUnit_Emergency - Tests
          Valid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                        OK (0.01s)
          Valid datum, admin redeemer, no signature, admin token - must succeed:                                                                                                                                                   OK (0.01s)
          Valid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                  OK (0.02s)
          Valid datum, admin redeemer, no signature, both tokens - must succeed:                                                                                                                                                   OK
          Valid datum, admin redeemer, signature, no tokens - must succeed:                                                                                                                                                        OK
          Valid datum, admin redeemer, signature, admin token - must succeed:                                                                                                                                                      OK (0.01s)
          Valid datum, admin redeemer, signature, emergency token - must succeed:                                                                                                                                                  OK
          Valid datum, admin redeemer, signature, both tokens - must succeed:                                                                                                                                                      OK
          Valid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                    OK (0.01s)
          Valid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                  OK (0.03s)
          Valid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                           OK
          Valid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                               OK (0.01s)
          Valid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                       OK (0.02s)
          Valid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                     OK (0.01s)
          Valid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                              OK (0.01s)
          Valid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                  OK (0.01s)
          Invalid datum, admin redeemer, no signature, no tokens - must fail:                                                                                                                                                      OK (0.02s)
          Invalid datum, admin redeemer, no signature, admin token - must fail:                                                                                                                                                    OK (0.01s)
          Invalid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                OK (0.01s)
          Invalid datum, admin redeemer, no signature, both tokens - must fail:                                                                                                                                                    OK (0.01s)
          Invalid datum, admin redeemer, signature, no tokens - must fail:                                                                                                                                                         OK (0.01s)
          Invalid datum, admin redeemer, signature, admin token - must fail:                                                                                                                                                       OK
          Invalid datum, admin redeemer, signature, emergency token - must fail:                                                                                                                                                   OK (0.01s)
          Invalid datum, admin redeemer, signature, both tokens - must fail:                                                                                                                                                       OK (0.03s)
          Invalid datum, emergency redeemer, no signature, no tokens - must fail:                                                                                                                                                  OK (0.01s)
          Invalid datum, emergency redeemer, no signature, admin token - must fail:                                                                                                                                                OK (0.01s)
          Invalid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                         OK
          Invalid datum, emergency redeemer, no signature, both tokens - must succeed:                                                                                                                                             OK
          Invalid datum, emergency redeemer, signature, no tokens - must fail:                                                                                                                                                     OK
          Invalid datum, emergency redeemer, signature, admin token - must fail:                                                                                                                                                   OK (0.01s)
          Invalid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                            OK (0.01s)
          Invalid datum, emergency redeemer, signature, both tokens - must succeed:                                                                                                                                                OK (0.03s)
        TX NAME: Fund_Delete_Tx - REDEEMER: InvestUnit_Delete - Tests
          Inputs Consume Tests
            Fund Input Tests
              Having valid for Fund input must succeed:                                                                                                                                                                            OK (0.03s)
              None valid for Fund input must fail (Just InvestUnit_Delete: ["Expected exactly one Fund input"]):                                                                                                                   OK (0.03s)
              Having more than one for Fund input must fail (Just InvestUnit_Delete: ["Expected exactly one Fund input"]):                                                                                                         OK (0.09s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid datum with InvalidEntityDatumType for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                                  OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerNonExist for Fund input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for Fund input must fail (Nothing: [""]):                                                                                                                         OK (0.04s)
            InvestUnit Input Tests
              Having valid for InvestUnit input must succeed:                                                                                                                                                                      OK (0.02s)
              Having more than one for InvestUnit input must fail (Just InvestUnit_Delete: ["Expected exactly one InvestUnit input"]):                                                                                             OK (0.05s)
              Using an invalid datum with InvalidEntityDatumNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.04s)
              Using an invalid datum with InvalidEntityDatumType for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnit input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.03s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnit input must fail (Nothing: [""]):                                                                                                                   OK (0.04s)
          Minting Tests
            FundID Minting Tests
              Having valid for FundID minting must succeed:                                                                                                                                                                        OK (0.04s)
              Using an invalid redeemer with InvalidRedeemerNonExist for FundID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerType for FundID minting must fail (Nothing: [""]):                                                                                                                     OK (0.05s)
              Using invalid Token Name for FundID minting must fail (Nothing: ["not isBurningFundID"]):                                                                                                                            OK (0.01s)
              Using more token amount for FundID minting must fail (Nothing: ["not isBurningFundID"]):                                                                                                                             OK (0.03s)
            InvestUnitID Minting Tests
              Having valid for InvestUnitID minting must succeed:                                                                                                                                                                  OK (0.05s)
              Using an invalid redeemer with InvalidRedeemerNonExist for InvestUnitID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                    OK (0.06s)
              Using an invalid redeemer with InvalidRedeemerType for InvestUnitID minting must fail (Nothing: [""]):                                                                                                               OK (0.05s)
              Using invalid Token Name for InvestUnitID minting must fail (Just InvestUnit_Delete: ["not isBurningInvestUnitID"]):                                                                                                 OK (0.05s)
              Using more token amount for InvestUnitID minting must fail (Just InvestUnit_Delete: ["not isBurningInvestUnitID"]):                                                                                                  OK (0.04s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.04s)
            Using invalid range must fail (Just InvestUnit_Delete: ["not isValidRange"]):                                                                                                                                          OK (0.04s)
            Using no specific range must fail (Just InvestUnit_Delete: ["not isValidRange"]):                                                                                                                                      OK (0.05s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.04s)
            Using no signatures must fail (Just InvestUnit_Delete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                                          OK (0.05s)
            Using other invalid signatures must fail (Just InvestUnit_Delete: ["not isSignedByAny admins nor isAdminTokenPresent"]):                                                                                               OK (0.04s)
    SwapOffer Tests
      SwapOffer Policy Tests
        TX NAME: SwapOffer_Create_Tx - REDEEMER: SwapOffer_MintID - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.01s)
              None valid for Protocol input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Protocol input ref"]):                                                                                                    OK (0.01s)
              Having more than one for Protocol input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Protocol input ref"]):                                                                                          OK
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Protocol input ref"]):                                                                   OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Protocol input ref"]):                                                                   OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Protocol input ref"]):                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Protocol input ref"]):                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Fund input ref"]):                                                                                                            OK
              Having more than one for Fund input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Fund input ref"]):                                                                                                  OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Fund input ref"]):                                                                           OK
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Fund input ref"]):                                                                           OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Fund input ref"]):                                                                OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_MintID: ["Expected exactly one Fund input ref"]):                                                                OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK (0.02s)
              None valid for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                                                                        OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                                                              OK (0.01s)
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                                       OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                            OK
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_MintID: ["not isCorrect_Output_SwapOffer_Value"]):                                                             OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_MintID: ["not isCorrect_Output_SwapOffer_Value"]):                                                            OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_MintID: ["not isCorrect_Output_SwapOffer_Value"]):                                                            OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_MintID: ["not isCorrect_Output_SwapOffer_Value"]):                                                            OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                           OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                           OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_MintID: ["not currentMAYZ == requiredMAYZ"]):                                                                OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_MintID: ["not isCorrect_Output_SwapOffer_Value"]):                                                                 OK
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK
              Having invalid address for SwapOffer output must fail (Just SwapOffer_MintID: ["Expected exactly one SwapOffer output"]):                                                                                            OK (0.02s)
          Minting Tests
            SwapOfferID Minting Tests
              Having valid for SwapOfferID minting must succeed:                                                                                                                                                                   OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOfferID minting must fail (Just SwapOffer_MintID: ["ERROR EVALUATING SCRIPT"]):                                                                       OK
              Using an invalid redeemer with InvalidRedeemerType for SwapOfferID minting must fail (Nothing: [""]):                                                                                                                OK
              Using invalid Token Name for SwapOfferID minting must fail (Just SwapOffer_MintID: ["not isMintingSwapOfferID"]):                                                                                                    OK (0.01s)
              Using more token amount for SwapOfferID minting must fail (Just SwapOffer_MintID: ["not isMintingSwapOfferID"]):                                                                                                     OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
          Specific Tests
            Having total_FT_Earned different from 0 must fail (Just SwapOffer_MintID: ["not isCorrect_Output_SwapOffer_Datum"]):                                                                                                   OK
        TX NAME: SwapOffer_Delete_Tx - REDEEMER: SwapOffer_BurnID - Tests
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Minting Tests
            SwapOfferID Minting Tests
              Having valid for SwapOfferID minting must succeed:                                                                                                                                                                   OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOfferID minting must fail (Just SwapOffer_BurnID: ["ERROR EVALUATING SCRIPT"]):                                                                       OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOfferID minting must fail (Nothing: [""]):                                                                                                                OK (0.03s)
              Using invalid Token Name for SwapOfferID minting must fail (Just SwapOffer_BurnID: ["not isBurningSwapOfferID"]):                                                                                                    OK (0.01s)
              Using more token amount for SwapOfferID minting must fail (Just SwapOffer_BurnID: ["not isBurningSwapOfferID"]):                                                                                                     OK
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.01s)
            Using invalid range must fail (Just SwapOffer_Delete: ["not isValidRange"]):                                                                                                                                           OK
            Using no specific range must fail (Just SwapOffer_Delete: ["not isValidRange"]):                                                                                                                                       OK
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.01s)
            Using no signatures must fail (Just SwapOffer_Delete: ["not txSignedBy admin"]):                                                                                                                                       OK
            Using other invalid signatures must fail (Just SwapOffer_Delete: ["not txSignedBy admin"]):                                                                                                                            OK (0.03s)
      SwapOffer Validator Tests
        TX NAME: SwapOffer_UpdateStatus_Tx - REDEEMER: SwapOffer_UpdateStatus - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one Fund input ref"]):                                                                                                      OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one Fund input ref"]):                                                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one Fund input ref"]):                                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one Fund input ref"]):                                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one Fund input ref"]):                                                          OK
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one Fund input ref"]):                                                          OK
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer input"]):                                                                                          OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                             OK
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                             OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                             OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                            OK
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                            OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                            OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                                      OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                                      OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["ERROR EVALUATING SCRIPT"]):                                                                     OK
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Datum_With_StatusChanged"]):                                         OK
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK (0.01s)
              None valid for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                                                                  OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                                 OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                                 OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                      OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                      OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                            OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                                     OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                                     OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                          OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                          OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                          OK
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["not isCorrect_Output_SwapOffer_Datum_With_StatusChanged"]):                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_UpdateStatus: ["Expected exactly one SwapOffer output"]):                                                                                      OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
            Using invalid range must fail (Just SwapOffer_UpdateStatus: ["not isValidRange"]):                                                                                                                                     OK (0.03s)
            Using no specific range must fail (Just SwapOffer_UpdateStatus: ["not isValidRange"]):                                                                                                                                 OK
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.01s)
            Using no signatures must fail (Just SwapOffer_UpdateStatus: ["not txSignedBy admin"]):                                                                                                                                 OK (0.01s)
            Using other invalid signatures must fail (Just SwapOffer_UpdateStatus: ["not txSignedBy admin"]):                                                                                                                      OK (0.01s)
        TX NAME: SwapOffer_UpdateAskedCommissionRate_Tx - REDEEMER: SwapOffer_UpdateAskedCommissionRate - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.01s)
              None valid for Protocol input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Protocol input ref"]):                                                                                 OK (0.01s)
              Having more than one for Protocol input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Protocol input ref"]):                                                                       OK
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Protocol input ref"]):                                                OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Protocol input ref"]):                                                OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Protocol input ref"]):                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Protocol input ref"]):                                     OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK
              None valid for Fund input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Fund input ref"]):                                                                                         OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Fund input ref"]):                                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Fund input ref"]):                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Fund input ref"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Fund input ref"]):                                             OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one Fund input ref"]):                                             OK
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.02s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer input"]):                                                                             OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                               OK
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                               OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                               OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                         OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                         OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                              OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                              OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["ERROR EVALUATING SCRIPT"]):                                                        OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Datum_With_CommissionChanged"]):                        OK
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK (0.02s)
              None valid for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                                                                     OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                                                           OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                                    OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                                    OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                         OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                         OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                               OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                              OK
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                              OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                              OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                             OK
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                             OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                             OK
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isCorrect_Output_SwapOffer_Datum_With_CommissionChanged"]):                       OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_UpdateAskedCommissionRate: ["Expected exactly one SwapOffer output"]):                                                                         OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.01s)
            Using invalid range must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isValidRange"]):                                                                                                                        OK (0.01s)
            Using no specific range must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not isValidRange"]):                                                                                                                    OK (0.01s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK
            Using no signatures must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not txSignedBy admin"]):                                                                                                                    OK (0.01s)
            Using other invalid signatures must fail (Just SwapOffer_UpdateAskedCommissionRate: ["not txSignedBy admin"]):                                                                                                         OK (0.01s)
        TX NAME: SwapOffer_UpdateSellRestrictions_Tx - REDEEMER: SwapOffer_UpdateSellRestrictions - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.03s)
              None valid for Fund input ref must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one Fund input ref"]):                                                                                            OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one Fund input ref"]):                                                                                  OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one Fund input ref"]):                                                           OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one Fund input ref"]):                                                           OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one Fund input ref"]):                                                OK
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one Fund input ref"]):                                                OK
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.02s)
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer input"]):                                                                                OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                              OK (0.02s)
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                              OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                   OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                   OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                   OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                  OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                  OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                  OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                            OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                            OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                 OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                 OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                 OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["ERROR EVALUATING SCRIPT"]):                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Datum_With_RestrictionsChanged"]):                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK (0.01s)
              None valid for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                                                                        OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                                                              OK
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                                       OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                                       OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                            OK
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                            OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                  OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                 OK
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                 OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                 OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                           OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Value_NotChanged"]):                                OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["not isCorrect_Output_SwapOffer_Datum_With_RestrictionsChanged"]):                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.02s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_UpdateSellRestrictions: ["Expected exactly one SwapOffer output"]):                                                                            OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.01s)
            Using invalid range must fail (Just SwapOffer_UpdateSellRestrictions: ["not isValidRange"]):                                                                                                                           OK (0.03s)
            Using no specific range must fail (Just SwapOffer_UpdateSellRestrictions: ["not isValidRange"]):                                                                                                                       OK (0.01s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.01s)
            Using no signatures must fail (Just SwapOffer_UpdateSellRestrictions: ["not txSignedBy admin"]):                                                                                                                       OK (0.01s)
            Using other invalid signatures must fail (Just SwapOffer_UpdateSellRestrictions: ["not txSignedBy admin"]):                                                                                                            OK (0.01s)
        TX NAME: SwapOffer_UpdateMinADA_Tx - REDEEMER: SwapOffer_UpdateMinADA - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                                                      OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                     OK
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one Fund input ref"]):                                                          OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer input"]):                                                                                          OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                                OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                                OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                     OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                    OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                    OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                    OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                              OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                              OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                   OK (0.03s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                   OK
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                   OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_UpdateMinADA: ["ERROR EVALUATING SCRIPT"]):                                                                     OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK
              None valid for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                                                                  OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                                                        OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                                 OK
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                                 OK (0.02s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                      OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                      OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                    OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                   OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                   OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                   OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                             OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                             OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                  OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                  OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                  OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["not isCorrect_Output_SwapOffer_Value_With_MinADAChanged"]):                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_UpdateMinADA: ["Expected exactly one SwapOffer output"]):                                                                                      OK (0.02s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.01s)
            Using invalid range must fail (Just SwapOffer_UpdateMinADA: ["not isValidRange"]):                                                                                                                                     OK (0.01s)
            Using no specific range must fail (Just SwapOffer_UpdateMinADA: ["not isValidRange"]):                                                                                                                                 OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK
            Using no signatures must fail (Just SwapOffer_UpdateMinADA: ["not txSignedBy admin"]):                                                                                                                                 OK (0.02s)
            Using other invalid signatures must fail (Just SwapOffer_UpdateMinADA: ["not txSignedBy admin"]):                                                                                                                      OK (0.01s)
          Property Based Tests
            Having Valid Min ADA positive must succeed:                                                                                                                                                                            OK (1.54s)
              +++ OK, passed 100 tests.
            Having Invalid Min ADA negative must fail (Just SwapOffer_UpdateMinADA: ["not min ADA > 0"]):                                                                                                                          OK (1.48s)
              +++ OK, passed 100 tests.
        TX NAME: SwapOffer_Deposit_Tx - REDEEMER: SwapOffer_Deposit - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_Deposit: ["Expected exactly one Fund input ref"]):                                                                                                           OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_Deposit: ["Expected exactly one Fund input ref"]):                                                                                                 OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_Deposit: ["Expected exactly one Fund input ref"]):                                                                          OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_Deposit: ["Expected exactly one Fund input ref"]):                                                                          OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_Deposit: ["Expected exactly one Fund input ref"]):                                                               OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_Deposit: ["Expected exactly one Fund input ref"]):                                                               OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.02s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer input"]):                                                                                               OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                           OK
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                           OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                               OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                               OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                               OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                         OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                         OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                              OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                              OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                              OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_Deposit: ["ERROR EVALUATING SCRIPT"]):                                                                          OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Datum_With_Deposit"]):                                                    OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK
              None valid for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                                                                       OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                                                             OK (0.01s)
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                                      OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                                      OK (0.03s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                           OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                           OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                               OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                              OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                              OK
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                              OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                                        OK
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                             OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                             OK
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Value_With_Deposit"]):                                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_Deposit: ["not isCorrect_Output_SwapOffer_Datum_With_Deposit"]):                                                   OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_Deposit: ["Expected exactly one SwapOffer output"]):                                                                                           OK
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.01s)
            Using invalid range must fail (Just SwapOffer_Deposit: ["not isValidRange"]):                                                                                                                                          OK (0.02s)
            Using no specific range must fail (Just SwapOffer_Deposit: ["not isValidRange"]):                                                                                                                                      OK (0.01s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.01s)
            Using no signatures must fail (Just SwapOffer_Deposit: ["not txSignedBy admin"]):                                                                                                                                      OK (0.01s)
            Using other invalid signatures must fail (Just SwapOffer_Deposit: ["not txSignedBy admin"]):                                                                                                                           OK (0.01s)
        TX NAME: SwapOffer_Withdraw_Tx - REDEEMER: SwapOffer_Withdraw - Tests
          Inputs Ref Tests
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_Withdraw: ["Expected exactly one Fund input ref"]):                                                                                                          OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_Withdraw: ["Expected exactly one Fund input ref"]):                                                                                                OK
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_Withdraw: ["Expected exactly one Fund input ref"]):                                                                         OK (0.02s)
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_Withdraw: ["Expected exactly one Fund input ref"]):                                                                         OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_Withdraw: ["Expected exactly one Fund input ref"]):                                                              OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_Withdraw: ["Expected exactly one Fund input ref"]):                                                              OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer input"]):                                                                                              OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                                         OK (0.02s)
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                                         OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                              OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                              OK
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                              OK
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                             OK
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                             OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                             OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                                       OK (0.02s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                                       OK
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                            OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                            OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                            OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_Withdraw: ["ERROR EVALUATING SCRIPT"]):                                                                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Datum_With_Withdraw"]):                                                  OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK
              None valid for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                                                                      OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                                     OK
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                             OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                            OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                            OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                            OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                                      OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                                      OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                           OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                           OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Value_With_Withdraw"]):                                           OK
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_Withdraw: ["not isCorrect_Output_SwapOffer_Datum_With_Withdraw"]):                                                 OK
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_Withdraw: ["Expected exactly one SwapOffer output"]):                                                                                          OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just SwapOffer_Withdraw: ["not isValidRange"]):                                                                                                                                         OK (0.01s)
            Using no specific range must fail (Just SwapOffer_Withdraw: ["not isValidRange"]):                                                                                                                                     OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK (0.01s)
            Using no signatures must fail (Just SwapOffer_Withdraw: ["not txSignedBy admin"]):                                                                                                                                     OK (0.01s)
            Using other invalid signatures must fail (Just SwapOffer_Withdraw: ["not txSignedBy admin"]):                                                                                                                          OK (0.02s)
        TX NAME: SwapOffer_SwapFTxADA_Tx - REDEEMER: SwapOffer_SwapFTxADA - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.01s)
              None valid for Protocol input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Protocol input ref"]):                                                                                                OK
              Having more than one for Protocol input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Protocol input ref"]):                                                                                      OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Protocol input ref"]):                                                               OK (0.01s)
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Protocol input ref"]):                                                               OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Protocol input ref"]):                                                    OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Protocol input ref"]):                                                    OK (0.03s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Fund input ref"]):                                                                                                        OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Fund input ref"]):                                                                                              OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Fund input ref"]):                                                                       OK
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Fund input ref"]):                                                                       OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Fund input ref"]):                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one Fund input ref"]):                                                            OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK (0.01s)
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer input"]):                                                                                            OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                                     OK
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                          OK
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                          OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                         OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                         OK
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                         OK (0.02s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                                   OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                                   OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                        OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["ERROR EVALUATING SCRIPT"]):                                                                       OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Commission"]):                                                                          OK
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK (0.01s)
              None valid for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                                                                    OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                                                          OK
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                                   OK (0.02s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                                   OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                        OK
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                         OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                        OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                        OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                                  OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                                  OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                       OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                       OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                       OK (0.01s)
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Output_SwapOffer_Value_With_SwapFTxADA"]):                                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK (0.01s)
              Having invalid address for SwapOffer output must fail (Just SwapOffer_SwapFTxADA: ["Expected exactly one SwapOffer output"]):                                                                                        OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.02s)
            Using invalid range must fail (Just SwapOffer_SwapFTxADA: ["not isValidRange"]):                                                                                                                                       OK (0.01s)
            Using no specific range must fail (Just SwapOffer_SwapFTxADA: ["not isValidRange"]):                                                                                                                                   OK (0.01s)
          Specific Tests
            Having not isOrderOpen must fail (Just SwapOffer_SwapFTxADA: ["not isOrderOpen"]):                                                                                                                                     OK (0.01s)
            Having isOrderRestrictedForSellingADA must fail (Just SwapOffer_SwapFTxADA: ["isOrderRestrictedForSellingADA"]):                                                                                                       OK (0.02s)
            Having isOrderRestrictedForSellingFT must succeed:                                                                                                                                                                     OK
            Having not isCorrect_Oracle_Signature must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Oracle_Signature"]):                                                                                                       OK (0.02s)
            Having Oracle Time Too Early must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Oracle_InRangeTime"]):                                                                                                              OK (0.01s)
            Having Oracle Time Too Late must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Oracle_InRangeTime"]):                                                                                                               OK (0.02s)
            Having FT Price ADA not found must fail (Just SwapOffer_SwapFTxADA: ["FT Price ADA not found in Oracle Data"]):                                                                                                        OK (0.01s)
          Property Based Tests
            Having Valid FT Amount must succeed:                                                                                                                                                                                   OK (1.58s)
              +++ OK, passed 100 tests.
            Having Invalid_Conversion must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Conversion"]):                                                                                                                         OK (1.54s)
              +++ OK, passed 100 tests.
            Having Invalid_Commissions must fail (Just SwapOffer_SwapFTxADA: ["not isCorrect_Commission"]):                                                                                                                        OK (1.53s)
              +++ OK, passed 100 tests.
            Having not isAmount_ADA_Available must fail (Just SwapOffer_SwapFTxADA: ["not isAmount_ADA_Available"]):                                                                                                               OK (1.56s)
              +++ OK, passed 100 tests.
        TX NAME: SwapOffer_SwapADAxFT_Tx - REDEEMER: SwapOffer_SwapADAxFT - Tests
          Inputs Ref Tests
            Protocol Input Ref Tests
              Having valid for Protocol input ref must succeed:                                                                                                                                                                    OK (0.01s)
              None valid for Protocol input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Protocol input ref"]):                                                                                                OK (0.01s)
              Having more than one for Protocol input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Protocol input ref"]):                                                                                      OK (0.01s)
              Having invalid ID value with InvalidTokenCS for Protocol input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Protocol input ref"]):                                                               OK
              Having invalid ID value with InvalidTokenTN for Protocol input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Protocol input ref"]):                                                               OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for Protocol input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Protocol input ref"]):                                                    OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Protocol input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Protocol input ref"]):                                                    OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                      OK (0.01s)
              Using an invalid datum with InvalidEntityDatumType for Protocol input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK (0.01s)
            Fund Input Ref Tests
              Having valid for Fund input ref must succeed:                                                                                                                                                                        OK (0.01s)
              None valid for Fund input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Fund input ref"]):                                                                                                        OK (0.01s)
              Having more than one for Fund input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Fund input ref"]):                                                                                              OK (0.02s)
              Having invalid ID value with InvalidTokenCS for Fund input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Fund input ref"]):                                                                       OK
              Having invalid ID value with InvalidTokenTN for Fund input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Fund input ref"]):                                                                       OK
              Having invalid ID value with InvalidTokenAmount (Zero) for Fund input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Fund input ref"]):                                                            OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for Fund input ref must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one Fund input ref"]):                                                            OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                          OK
              Using an invalid datum with InvalidEntityDatumType for Fund input ref must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                              OK
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.01s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer input"]):                                                                                            OK (0.02s)
              Having invalid ID value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                                     OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                          OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                          OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                         OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                         OK
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                         OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                                   OK (0.01s)
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                                   OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                        OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                        OK
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                        OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["ERROR EVALUATING SCRIPT"]):                                                                       OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerData for SwapOffer input must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Commission"]):                                                                          OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.02s)
          Outputs Tests
            SwapOffer Outputs Tests
              Having valid for SwapOffer output must succeed:                                                                                                                                                                      OK (0.02s)
              None valid for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                                                                    OK (0.01s)
              Having more than one for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                                                          OK
              Having invalid ID value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                                   OK (0.01s)
              Having invalid ID value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                                   OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                        OK (0.01s)
              Having invalid ID value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                         OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                        OK (0.01s)
              Having invalid ADA value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                        OK (0.02s)
              Having invalid ADA value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                        OK
              Having invalid MAYZ value with InvalidTokenCS for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                                  OK
              Having invalid MAYZ value with InvalidTokenTN for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                                  OK (0.02s)
              Having invalid MAYZ value with InvalidTokenAmount (Zero) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                       OK (0.01s)
              Having invalid MAYZ value with InvalidTokenAmount (Less) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                       OK
              Having invalid MAYZ value with InvalidTokenAmount (More) for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                       OK (0.02s)
              Using an invalid datum with InvalidEntityDatumData for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Output_SwapOffer_Value_With_SwapADAxFT"]):                                             OK (0.01s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                        OK
              Using an invalid datum with InvalidEntityDatumType for SwapOffer output must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                            OK
              Having invalid address for SwapOffer output must fail (Just SwapOffer_SwapADAxFT: ["Expected exactly one SwapOffer output"]):                                                                                        OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK (0.01s)
            Using invalid range must fail (Just SwapOffer_SwapADAxFT: ["not isValidRange"]):                                                                                                                                       OK (0.01s)
            Using no specific range must fail (Just SwapOffer_SwapADAxFT: ["not isValidRange"]):                                                                                                                                   OK (0.01s)
          Specific Tests
            Having not isOrderOpen must fail (Just SwapOffer_SwapADAxFT: ["not isOrderOpen"]):                                                                                                                                     OK (0.01s)
            Having isOrderRestrictedForSellingADA must succeed:                                                                                                                                                                    OK (0.03s)
            Having isOrderRestrictedForSellingFT must fail (Just SwapOffer_SwapADAxFT: ["isOrderRestrictedForSellingFT"]):                                                                                                         OK (0.02s)
            Having not isCorrect_Oracle_Signature must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Oracle_Signature"]):                                                                                                       OK (0.01s)
            Having Oracle Time Too Early must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Oracle_InRangeTime"]):                                                                                                              OK (0.01s)
            Having Oracle Time Too Late must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Oracle_InRangeTime"]):                                                                                                               OK (0.01s)
            Having FT Price ADA not found must fail (Just SwapOffer_SwapADAxFT: ["FT Price ADA not found in Oracle Data"]):                                                                                                        OK (0.02s)
          Property Based Tests
            Having Valid ADA Amount must succeed:                                                                                                                                                                                  OK (1.56s)
              +++ OK, passed 100 tests.
            Having Invalid_Conversion must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Conversion"]):                                                                                                                         OK (1.52s)
              +++ OK, passed 100 tests.
            Having Invalid_Commissions must fail (Just SwapOffer_SwapADAxFT: ["not isCorrect_Commission"]):                                                                                                                        OK (1.58s)
              +++ OK, passed 100 tests.
            Having not isAmount_FT_Available must fail (Just SwapOffer_SwapADAxFT: ["not isAmount_FT_Available"]):                                                                                                                 OK (1.59s)
              +++ OK, passed 100 tests.
        TX NAME: SwapOffer_Delete_Tx - REDEEMER: SwapOffer_Delete - Tests
          Inputs Consume Tests
            SwapOffer Input Tests
              Having valid for SwapOffer input must succeed:                                                                                                                                                                       OK (0.02s)
              Having more than one for SwapOffer input must fail (Just SwapOffer_Delete: ["Expected exactly one SwapOffer input"]):                                                                                                OK (0.02s)
              Using an invalid datum with InvalidEntityDatumNonExist for SwapOffer input must fail (Just SwapOffer_Delete: ["ERROR EVALUATING SCRIPT"]):                                                                           OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOffer input must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                         OK (0.01s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOffer input must fail (Nothing: [""]):                                                                                                                    OK (0.01s)
          Minting Tests
            SwapOfferID Minting Tests
              Having valid for SwapOfferID minting must succeed:                                                                                                                                                                   OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerNonExist for SwapOfferID minting must fail (Nothing: ["ERROR EVALUATING SCRIPT"]):                                                                                     OK (0.02s)
              Using an invalid redeemer with InvalidRedeemerType for SwapOfferID minting must fail (Nothing: [""]):                                                                                                                OK (0.02s)
              Using invalid Token Name for SwapOfferID minting must fail (Just SwapOffer_Delete: ["not isBurningSwapOfferID"]):                                                                                                    OK (0.01s)
              Using more token amount for SwapOfferID minting must fail (Just SwapOffer_Delete: ["not isBurningSwapOfferID"]):                                                                                                     OK (0.01s)
          Validy Range Tests
            Using valid range must succeed:                                                                                                                                                                                        OK
            Using invalid range must fail (Just SwapOffer_Delete: ["not isValidRange"]):                                                                                                                                           OK (0.02s)
            Using no specific range must fail (Just SwapOffer_Delete: ["not isValidRange"]):                                                                                                                                       OK (0.02s)
          Signatures Tests
            Using valid signatures must succeed:                                                                                                                                                                                   OK
            Using no signatures must fail (Just SwapOffer_Delete: ["not txSignedBy admin"]):                                                                                                                                       OK (0.02s)
            Using other invalid signatures must fail (Just SwapOffer_Delete: ["not txSignedBy admin"]):                                                                                                                            OK (0.02s)
        TX NAME: SwapOffer_Emergency_Tx - REDEEMER: SwapOffer_Emergency - Tests
          Valid datum, admin redeemer, no signature, no emergency token - must fail:                                                                                                                                               OK (0.01s)
          Valid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                  OK (0.01s)
          Valid datum, admin redeemer, signature, no emergency token - must succeed:                                                                                                                                               OK
          Valid datum, admin redeemer, signature, emergency token - must succeed:                                                                                                                                                  OK (0.01s)
          Valid datum, emergency redeemer, no signature, no emergency token - must fail:                                                                                                                                           OK
          Valid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                           OK (0.02s)
          Valid datum, emergency redeemer, signature, no emergency token - must fail:                                                                                                                                              OK (0.01s)
          Valid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                              OK (0.01s)
          Invalid datum, admin redeemer, no signature, no emergency token - must fail:                                                                                                                                             OK
          Invalid datum, admin redeemer, no signature, emergency token - must fail:                                                                                                                                                OK
          Invalid datum, admin redeemer, signature, no emergency token - must fail:                                                                                                                                                OK (0.01s)
          Invalid datum, admin redeemer, signature, emergency token - must fail:                                                                                                                                                   OK (0.01s)
          Invalid datum, emergency redeemer, no signature, no emergency token - must fail:                                                                                                                                         OK
          Invalid datum, emergency redeemer, no signature, emergency token - must succeed:                                                                                                                                         OK
          Invalid datum, emergency redeemer, signature, no emergency token - must fail:                                                                                                                                            OK (0.01s)
          Invalid datum, emergency redeemer, signature, emergency token - must succeed:                                                                                                                                            OK (0.02s)

All 2144 tests passed (182.21s)
Test suite AutomaticTests: PASS
Test suite logged to:
/home/manuelpadilla/sources/reposUbuntu/MAYZ/mayz-contracts-v1.0.5/dist-newstyle/build/x86_64-linux/ghc-8.10.7/mayz-protocol-contracts-1.0.5/t/AutomaticTests/test/mayz-protocol-contracts-1.0.5-AutomaticTests.log
1 of 1 test suites (1 of 1 test cases) passed.
